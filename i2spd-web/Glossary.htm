<!DOCTYPE html>
<!-- saved from url=(0068)https://class.coursera.org/programdesign-002/wiki/view?page=Glossary -->
<html lang="en-US"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<title>Wiki - Glossary | Introduction to Systematic Program Design - Part 1</title>
<link rel="stylesheet" href="https://dt5zaw6a98blc.cloudfront.net/site-static/595ddfeac34ca20b470b491885b1acad3564b90f/css/spark.main.css">
<link rel="stylesheet" href="https://www.coursera.org/maestro/api/course/971286/course.css">
<link rel="icon" href="https://spark-public.s3.amazonaws.com/programdesign/static/images/favicon.ico">
<style type="text/css"> .coursera-reporter-link { display:inline-block;} </style><script type="text/javascript" src="./Glossary_files/MathJax.js"></script><style type="text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1em; bottom: 1.5em; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type="text/css">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 2px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_MenuItem {padding: 2px 2em; background: transparent}
.MathJax_MenuTitle {background-color: #CCCCCC; margin: -1px -1px 1px -1px; text-align: center; font-style: italic; font-size: 80%; color: #444444; padding: 2px 0; overflow: hidden}
.MathJax_MenuArrow {position: absolute; right: .5em; color: #666666}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuRadioCheck {position: absolute; left: 1em}
.MathJax_MenuLabel {padding: 2px 2em 4px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #CCCCCC; margin: 4px 1px 0px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: Highlight; color: HighlightText}
.MathJax_Menu_Close {position: absolute; width: 31px; height: 31px; top: -15px; left: -15px}
</style><style type="text/css">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
</style></head>

<body><div id="MathJax_Message" style="display: none;"></div>
    <a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#course-page-content" class="hidden">Skip Navigation</a>
    <div class="hidden">
        This page features MathJax technology to render mathematical formulae.
        If you are using a screen reader, please visit <a href="http://www.dessci.com/en/products/mathplayer/">MathPlayer</a> to download the plugin for your browser. Please note that this is an Internet Explorer-only plugin at this time.
    </div>

    <h1 class="hidden">Introduction to Systematic Program Design - Part 1</h1>

    <script type="text/javascript" async="" src="./Glossary_files/204.min.js"></script><script type="text/javascript" async="" src="./Glossary_files/ga.js"></script><script>window.onerror = function(message, url, lineNum) {

  // First check the URL and line number of the error
  url = url || window.location.href;
  // 99% of the time, errors without line numbers arent due to our code,
  // they are due to third party plugins and browser extensions
  if (lineNum === undefined || lineNum == null) return;
  
  // Now figure out the actual error message
  // If it's an event, as triggered in several browsers
  if (message.target && message.type) {
    message = message.type;
  }
  if (!message.indexOf) {
    message = 'Non-string, non-event error: ' + (typeof message);
  }
  
  var errorDescrip = {
    message: message,
    script: url,
    line: lineNum,
    url: document.URL
  }
  
  var err = {
    key: 'page.error.javascript', 
    value: errorDescrip
  }
  
  window._204 = window._204 || [];
  window._204.push(err);
  
  window._gaq = window._gaq || [];
  window._gaq.push(err);
}</script>

<div class="course-topbar container-fluid" role="banner">

    <div class="row-fluid">

        <div class="span3">
          <a href="https://www.coursera.org/" class="course-topbar-logo" data-if-linkable="add-referrer"></a>
        </div>

        <div class="course-topbar-nav-container span9" style="float:right;">
            <h2 class="hidden">Top Navigation Bar</h2>

            <ul class="course-topbar-nav-list">
                <li class="course-topbar-nav-list-item">
                  <a href="https://www.coursera.org/courses" data-if-linkable="add-referrer">Courses</a>
                </li>

                
                <li class="course-topbar-nav-list-item" tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-topbar-my" data-popup="#course-topbar-my" data-popup-bind-open="mouseenter" data-popup-close="" style="cursor:pointer;" data-popup-direction="se">
                                        <a data-user-id="1216070">
                        Christopher Edward Beattie                        <i class="icon-caret-down"></i>
                    </a>
                </li>

                            </ul>
        </div>
    </div>

    <div id="course-topbar-aboutus" class="course-topbar-sublist">
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/jobs" target="_new" data-if-linkable="add-referrer">Jobs</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/team" target="_new" data-if-linkable="add-referrer">Team</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/contact" target="_new" data-if-linkable="add-referrer">Contact Us</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/" target="_new" data-if-linkable="add-referrer">About Us</a>
    </div>

    <div id="course-topbar-my" class="course-topbar-sublist">
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/" target="_new">My Courses</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/account/profile" target="_new">Profile</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/account/records" target="_new">Course Records</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/account/settings" target="_new">Settings</a>
                <a class="course-topbar-sublist-item" href="https://class.coursera.org/programdesign-002/class/preferences">Course Preferences</a>
        <a class="course-topbar-sublist-item" href="https://class.coursera.org/programdesign-002/auth/logout">Sign Out</a>
    </div>

</div>








<div class="course-topbanner-wrapper">
  <div class="course-topbanner">
    <div class="course-topbanner-university-logo">
      <a href="https://www.coursera.org/ubc" class="coursera-university-color" target="_blank" data-if-linkable="add-referrer" title="https://www.coursera.org/ubc">
        <img src="./Glossary_files/university_logo" alt="ubc">
      </a>
    </div>

    
    <h1 class="course-topbanner-header">
      <a class="course-topbanner-name coursera-university-color" href="https://class.coursera.org/programdesign-002/class/index" data-if-linkable="modal-lock">
        Introduction to Systematic Program Design - Part 1      </a>
      <br>
      <span class="course-topbanner-instructor" style="">
        by  Gregor  Kiczales      </span>
    </h1>

  </div>
</div>

        <div class="container-fluid" style="position:relative;">
        <div class="row-fluid">
            <div id="course-page-sidebar" role="navigation">
                <div class="course-navbar-container">
	<a href="https://class.coursera.org/programdesign-002/class/index">
	<img src="./Glossary_files/logo" style="width: 205px;height: 116px;margin: -15px 0px 8px 1px; box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.05);" alt="Course Home Page">
	</a>


<h2 class="hidden">Side Navigation Bar</h2>
<ul class="course-navbar-list">
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/class/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Announcements							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=CourseInformation" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Course Information							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=ToDoWellinThisCourse" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				To Do Well in This Course							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/forum/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Discussion Forums							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/quiz/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Quizzes							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/human_grading/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Peer Graded Problems							</a>
						</li>
	
		
	<li class="course-navbar-item">
					<h3>Reference</h3>
			</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=DesignRecipes" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Design Recipes							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Syllabus" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Syllabus							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Language" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Language							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=StyleRules" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Style Rules							</a>
						</li>
	
		
	<li class="course-navbar-item active">
								<a href="./Glossary_files/Glossary.htm" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Glossary							<span class="course-navbar-selected-marker">(selected)</span></a>
						</li>
	
		
	<li class="course-navbar-item">
					<h3>Modules</h3>
			</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=BSLModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				1a Beginning Student Language							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=HtDFModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				1b How to Design Functions							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=HtDDModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				2 How to Design Data							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=HtDWModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				3a How to Design Worlds							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=CompoundModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				3b Compound							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=SelfRefModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				4a Self Reference							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=RefModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				4b Reference 							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=NatModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				5a Naturals							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=HelpersModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				5b Helpers							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=BSTsModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				6a Binary Search Trees							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=MutualRefModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				6b Mutual Reference							</a>
						</li>
	
		
	<li class="course-navbar-item">
					<h3>Additional Resources</h3>
			</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=AllProblems" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				All Problems							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=AllLectures" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				All Lectures							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/lecture/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				All Lectures (Classic)							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="http://www.ccs.neu.edu/home/matthias/HtDP2e/" target="_blank" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				HtDP/2e Book				<span class="icon-share"></span>			</a>
						</li>
	
	
		<li class="course-navbar-item">
		<a href="https://share.coursera.org/wiki/index.php/programdesign:Main" target="_blank" class="coursera-university-color" title="Open course wiki in new window">
			Course Wiki
			<span class="icon-share"></span>
		</a>
	</li>
		
		<li class="course-navbar-item">
		<a href="http://www.meetup.com/Coursera/" target="_blank" class="coursera-university-color">
			Join a Meetup
			<span class="icon-share"></span>
		</a>
	</li>
	
    </ul>

<ul style="list-style-type:none;margin-left: 10px;">
  <li><a href="http://help.coursera.org/" class="coursera-university-color" target="_blank" title="Open help articles in new window"><i class="icon-question-sign"></i> Help Articles</a></li>
</ul>

<ul style="list-style-type:none;margin-left: 10px;">
		<li><a href="https://class.coursera.org/programdesign-002/forum/list?forum_id=10000" class="coursera-university-color"><i class="icon-comments"></i> Course Materials Errors</a></li>
	<li><a href="https://class.coursera.org/programdesign-002/forum/list?forum_id=10001" class="coursera-university-color"><i class="icon-comments"></i> Technical Issues</a></li>

</ul>

</div>
            </div>
            <div id="course-page-content" role="main">
                                

<h2 class="course-page-header">
    Glossary    <a class="coursera-reporter-link" title="Click here if you&#39;re experiencing technical problems or found errors in the course materials." target="_blank" href="https://class.coursera.org/programdesign-002/help/pages?url=https%3A%2F%2Fclass.coursera.org%2Fprogramdesign-002%2Fwiki%2Fview%3Fpage%3DGlossary">
      Help
    </a>
    <a data-coursera-admin-helpwidget-link="" rel="help" href="https://class.coursera.org/mooc/help/pages/setup" title="Course Page Setup" style="display:none;">Learn more.</a>
</h2>

<div id="internal_html_page_content">

<p>
    Definitions of terms used in this course. For terms that have a more general meaning the definition here is as we use the term in this class.
</p>

<h4> Contents</h4>

<ul>
<li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Abstract">Abstract (verb)</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Accumulator">Accumulator</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Arbitrary%20Sized">Arbitrary Sized</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Argument">Argument</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Atomic%20Data">Atomic Data</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Backtracking">Backtracking</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Boolean">Boolean</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#BST">BST</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Closure">Closure</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Compound">Compound</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Constant">Constant</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Data">Data</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Data%20Definition">Data Definition</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Directed%20Acyclic%20Graph">Directed Acyclic Graph</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Directed%20Graph">Directed Graph</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Enumeration">Enumeration</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Expression">Expression</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Function">Function</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Graph">Graph</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Helper%20Function">Helper Function</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Image">Image</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Integer">Integer</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Itemization">Itemization</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Lambda">Lambda</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#List">List</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Mixed%20Data%20Itemization">Mixed Data Itemization</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Mutable%20Variable">Mutable Variable</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Natural">Natural</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Number">Number</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Parameter">Parameter</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Predicate">Predicate</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Primitive">Primitive</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#ProgramDomain">Program Domain (aka Problem Domain)</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Purpose">Purpose</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Recursion">Recursion</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Recursion">Recursive Function</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Selector">Selector</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Signature">Signature</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#String">String</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Stub">Stub</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Template">Template</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Type%20Comment">Type Comment</a>
    </li>
    <li>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Value">Value</a>
    </li>
</ul>
<p></p>
<hr>
<dl>
<a name="Abstract"></a>
    <dt>Abstract (verb)</dt>

    <dd>
        Abstraction means taking two or more expressions or functions that are very similar, and turning those differences into parameters of a more general-purpose <strong>abstract
      function</strong>. The <a href="https://class.coursera.org/programdesign-002/wiki/view?page=AbstractionFromExamples">Abstraction
      From Examples</a>
        and <a href="https://class.coursera.org/programdesign-002/wiki/view?page=AbstractionFromTypeComments">Abstraction
      From Type Comments</a> recipes cover the design of abstract functions. It is also possible to design abstract types, but we do not do that in this course.
    </dd>
    <br><a name="Accumulator"></a>	<dt>Accumulator</dt>

    <dd>
        An accumulator is a parameter that keeps track of information that was available earlier in a structural recursion, sometimes that information is built-up, or accumulated through the recursion. An accumulator can also be a mutable variable used with a
        looping construct to achieve the same effect.
    </dd>
    <br><a name="Arbitrary%20Sized"></a>	<dt>Arbitrary Sized</dt>

    <dd>
        Arbitrary Sized information (or data) is information (or data) for which the size is not known at the time the program is designed. A "player with a name and jersey number" is not arbitrary sized, it is compound data with two parts. But "all the players
        in the league" is arbitrary sized because we do not know ahead of time how many players there will be.
    </dd>

    <br><a name="Argument"></a> <dt>Argument</dt>

    <dd>An argument is a value that passed to a function or a primitive operation when it is called. The arguments are the values that result from evaluating the operands in the function or primitive call. See <a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Parameter" title="Link: #Parameter">parameter</a> for a discussion
        of the differences between operands, arguments and parameters.
    </dd>
    <br><a name="Atomic%20Data"></a>	<dt>Atomic Data</dt>

    <dd>Atomic data is a form of data that cannot be broken down into smaller data pieces.</dd>
    <br><a name="Backtracking"></a>	<dt>Backtracking</dt>

    <dd>In a backtracking search the traversal first proceeds down one branch of the tree (or graph). If that branch fails the search along that branch produces a special failure value, such as false, and the calling function then search the next branch.
        In this way the search backtracks to the nearest node in the tree and follows the next branch.</dd>
    <br><a name="Boolean"></a>
    <dt>Boolean</dt>

    <dd>
<tt>Boolean</tt> is a primitive type that is comprised of just two values: <tt>true</tt> and <tt>false</tt>.</dd>
    <br><a name="BST"></a>
    <dt>BST</dt>

    <dd>A BST, or binary search tree, a data structure used to hold data that has been sorted in some way. Binary means that each node has has at most two children. “Search” means that the nodes are structured in a particular sorted order: for any given node
        n with a key k, all of its children with a key smaller than k are in the left sub-branch. All of its children with a key larger than k are in the right sub-branch. “Tree” describes what this structure would look like if it were drawn on paper.
    </dd>

    <br><a name="Closure"></a>
    <dt>Closure</dt>

    <dd>A closure is a locally defined function in which the body of the function uses a parameter of the enclosing function definition. The closure can be defined with local or lambda, but it must be defined inside of another function. In the example below,
        the helper function bigger? is a closure.
        <br><img src="./Glossary_files/closure.jpg" alt="closure " title="Image: https://spark-public.s3.amazonaws.com/programdesign/image_files/closure.jpg">
</dd>

    <br><a name="Compound"></a>
    <dt>Compound</dt>

    <dd>Compound data is a single data item that is made up of more than one related values, such as a person's first name, last name, and age. In this course we compound data is created using <tt>define-struct</tt>.
    </dd>
    <br><a name="Constant"></a>
    <dt>Constant</dt>

    <dd>A constant is named value defined using <tt>define</tt>. It is called a constant because once it is defined it never changes.</dd>

    <br><a name="Data"></a>
    <dt>Data</dt>

    <dd>Data is the mass noun for values in our programs including numbers, strings, images, lists and compound data. In the design of programs we make a number of decisions about how to represent information as data.
    </dd>

    <br><a name="Data%20Definition"></a>
    <dt>Data Definition</dt>

    <dd>A data definition describes a plan for representing information from the program's domain using data inside the program. A data definition includes a type comment that describes how to form the new type of data; an interpretation that describes how
        the data represents information in the program's domain; examples of the new type of data and a data driven template for functions that consume a single argument of the new type of data. Data definitions are designed using the
        <a href="https://class.coursera.org/programdesign-002/wiki/view?page=HtDData">How
      to Design Data recipe</a>.</dd>

    <br><a name="Directed%20Acyclic%20Graph"></a>
    <dt>Directed Acyclic Graph</dt>

    <dd>A directed acyclic graph (DAG) is a <a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Directed%20Graph">directed graph</a> that does not contain cycles. In other words, it is impossible to start at a node, follow the edges of the graph and visit the same node more than once.</dd>
    <br><a name="Directed%20Graph"></a>
    <dt>Directed Graph</dt>

    <dd>A directed graph is a <a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary#Graph">graph</a> in which the edges between the nodes have a single direction.</dd>

    <br><a name="Enumeration"></a>
    <dt>Enumeration</dt>

    <dd>A form of data definition in which the program domain information consists of a fixed number of distinct values.
    </dd>

    <br><a name="Expression"></a>
    <dt>Expression</dt>

    <dd>
        An expression is an element of a program that is evaluated to produce a value. See the
        <a href="https://class.coursera.org/programdesign-002/wiki/view?page=Language">Language
      page</a> for the detailed rules for forming an expression.
    </dd>

    <br><a name="Function"></a>
    <dt>Function</dt>

    <dd>
        Functions in programs are very similar to functions in mathematics. In math, a function f(x) can be passed a value for x, and it will produce a result based on that value. Functions in programs act the same way. They have a name (in the math example this
        name was "f ") and one or more parameters (in the math example, the parameter was "x"). Functions also have a body, which is an expression that is evaluated to produce the resulting value of the function.
    </dd>

    <br><a name="Graph"></a>
    <dt>Graph</dt>

    <dd>
        A graph is a set of nodes and a set of edges such that each edge joins two nodes.
    </dd>

    <br><a name="Helper%20Function"></a>
    <dt>Helper Function</dt>

    <dd>In the design of a complex function it is often useful to design sub-functions that the main function can call to do part of its work. These sub-functions are sometimes called helper functions.
    </dd>

    <br><a name="Image"></a>
    <dt>Image</dt>

    <dd>
<tt>Image</tt> is a primitive type of data that represents image, such as the result of a built in image function or a copy-pasted picture.
    </dd>

    <br><a name="Integer"></a>
    <dt>Integer</dt>

    <dd>
<tt>Integer</tt> is a primitive type of data that represents any positive or negative whole number (… -2, -1, 0, 1, 2 …).</dd>

    <br><a name="Itemization"></a>
    <dt>Itemization</dt>

    <dd>A form of data definition in which the data is comprised of two or more subclasses, in which at least one of the subclasses is not a distinct value.</dd>

    <br><a name="Lambda"></a>	<dt>Lambda</dt>

    <dd>
        Lambda expressions make it possible to produce anonymous (or nameless) functions. They are convenient to use when it is necessary to pass a function as an argument to another function.
    </dd>

    <br><a name="List"></a>
    <dt>List</dt>

    <dd>A list is a data structure that represents a list of items. If there is nothing in the list, its value is empty, whereas if there is data in the list (say the numbers 1 2 3), the value would be <tt>(cons 1 (cons 2 (cons 3 empty)))</tt>. Conses are
        a type of compound data: The constructor is cons, the different elements in the list can be accessed by using the selectors first and rest, and there are predicates available such as <tt>cons?</tt> and <tt>empty?</tt>
    </dd>

    <br><a name="Mixed%20Data%20Itemization"></a> <dt>Mixed Data Itemization</dt>

    <dd>A mixed data itemization is one in which at least two of the subclasses are&nbsp;<span style="color: rgb(50, 51, 51); font-family: &#39;Helvetica Neue&#39;; line-height: normal; ">represented</span>&nbsp;by data of different types.<br>
</dd>

    <br><a name="Mutable%20Variable"></a>
    <dt>Mutable Variable</dt>

    <dd>
        A mutable variable is a variable that can have its value changed after it has been defined. Mutable variables are not used in Part 1 of the course.
    </dd>

    <br><a name="Natural"></a>
    <dt>Natural</dt>

    <dd>
<tt>Natural</tt> is a primitive type data that represents any non-negative whole number (0, 1, 2, 3…).</dd>

    <br><a name="Number"></a>	<dt>Number</dt>

    <dd>
<tt>Number</tt> is a primitive type of data that represents any number, including 0, fractions, decimal numbers and inexact numbers. For example, <tt>1, -5, 3.4, 134.9853957</tt> and <tt>#i1.4142135623730951</tt> are all <tt>Numbers</tt>.</dd>
    <br><a name="Parameter"></a>	<dt>Parameter</dt>

    <dd>A parameter is a word used in a function declaration that represents the changing value, or the variable. It is put just after the function name so that the varying value can be specified when the function is called. When the function is called with
        a specific value, that value is called an argument. In the case below, <tt>color</tt> is a parameter, whereas <tt>"red"</tt> is an argument.
        <br><img src="./Glossary_files/parameter_vs_argument.jpg" alt="parameter vs argument " title="Image: https://spark-public.s3.amazonaws.com/programdesign/image_files/parameter_vs_argument.jpg">
</dd>
    <br><a name="Predicate"></a> <dt>Predicate</dt>

    <dd>A function or primitive that produces a boolean value.</dd>

    <br><a name="Primitive"></a>	<dt>Primitive</dt>

    <dd>A primitive is a basic building block provided by BSL that we use when we design our programs. BSL provides primitive data and primitive operations on data.</dd>
    <br><a name="ProgramDomain"></a><dt>Program Domain (aka Problem Domain)</dt>

    <dd>The domain of a program is the subject matter or nature of the problem. So in a payroll system the program domain includes concepts like employees and salaries etc. In a transit system it would include concepts like bus stops and routes and schedules.
        The SPD approach, and in particular the HtDD and HtDW recipes stress focusing on the domain of the problem (salaries and&nbsp;<span style="color: rgb(50, 51, 51); font-family: &#39;Helvetica Neue&#39;; line-height: normal; ">paycheques</span>) before the domain of the solution (<tt>Number</tt>, <tt>Integer</tt> etc.).<br>
</dd>
    <br><a name="Purpose"></a>	<dt>Purpose</dt>

    <dd>A purpose is a comment that is written when a function is designed that explains in words what the function is supposed to produce. Try to keep purposes below 78 characters, but be specific!
    </dd>
    <br><a name="Recursion"></a>	<dt>Recursion</dt>

    <dd>
        When a function calls itself we say that the function is recursive. When a type comment refers to itself we say that the type involves self-reference. Both are forms of recursion.
    </dd>

    <br><a name="Selector"></a>	<dt>Selector</dt>

    <dd>A selector is a function that is used on compound data to "select for" (or, to get the values of) the different fields of the data. The selector name consists of the data structure's name followed by a dash and then the name of the field that the
        selector&nbsp;<span style="color: rgb(50, 51, 51); font-family: &#39;Helvetica Neue&#39;; line-height: normal; ">accesses</span>&nbsp; The argument for the selector should be the specific compound data for which you want to access the field. For example, with a data definition such as:&nbsp;<br><img src="./Glossary_files/selector.jpg" alt="selector " title="Image: https://spark-public.s3.amazonaws.com/programdesign/image_files/selector.jpg"><br>Then for a cat c, the expressions would be <tt>(cat-x c)</tt> to get the cat's x-coordinate and <tt>(cat-y c)</tt> to get the cat's y-coordinate.
    </dd>

    <br><a name="Signature"></a>	<dt>Signature</dt>

    <dd>A signature is the first line written in a function design. It is a comment that specifies the types of arguments that the function will consume, as well as what type of data the function produces.</dd>

    <br><a name="String"></a>	<dt>String</dt>

    <dd>A <tt>String</tt> is a kind of primitive data that consists of symbols “strung” together. Strings are always enclosed in double quotation marks <tt>“like this”</tt>. It is important to note that if numbers are written inside strings, they are strings
        not numbers. <tt>“123”</tt>
        does not have the value of one hundred twenty three, since it is a <tt>String</tt>, whereas 123 does have the value of one hundred twenty three, since it is a Number.</dd>

    <br><a name="Stub"></a>	<dt>Stub</dt>

    <dd>A stub is a mock-version of a function that specifies the function's proper name and parameter(s), but where the body of the function is simply a value of the proper return type. See the <a href="https://class.coursera.org/programdesign-002/wiki/view?page=HtDFunctions#S1">HtD Functions</a> page
        for more information on stubs.</dd>

    <br><a name="Template"></a>	<dt>Template</dt>

    <dd>A template describes the basic structure or backbone of the function independent of its details. Data driven templates are based on the type of data the function consumes. Other kinds of templates are based on knowing something about the basic structure
        of the computation the function will perform. The idea of the template is to let us write down quickly what we know about the function definition "before we get to the details".
        <br><br>
</dd>

    <a name="Type%20Comment"></a>	<dt>Type Comment</dt>

    <dd>A type comment is a comment in a data definition that defines how the new type of data is formed.
    </dd>

    <br><a name="Value"></a>	<dt>Value</dt>

    <dd>A value is a data element, such as 1, <tt>"foo"</tt>, <tt>(make-cat 10 20)</tt> etc.</dd>
    <br>
</dl>
</div>
<hr>
<div>
    <div style="float:left">
    	    	    </div>
    <div style="float:right;text-align:right;font-size:10px;">
    	Created Thu 21 Feb 2013  2:08 PM EST (UTC -0500)<br>
    	Last Modified Sat 21 Sep 2013 11:09 AM EDT (UTC -0400)    </div>
</div>

            </div>
        </div>
    </div>
        
    
    <script src="./Glossary_files/spark.js"></script>

<script>window.onerror = function(message, url, lineNum) {

  // First check the URL and line number of the error
  url = url || window.location.href;
  // 99% of the time, errors without line numbers arent due to our code,
  // they are due to third party plugins and browser extensions
  if (lineNum === undefined || lineNum == null) return;
  
  // Now figure out the actual error message
  // If it's an event, as triggered in several browsers
  if (message.target && message.type) {
    message = message.type;
  }
  if (!message.indexOf) {
    message = 'Non-string, non-event error: ' + (typeof message);
  }
  
  var errorDescrip = {
    message: message,
    script: url,
    line: lineNum,
    url: document.URL
  }
  
  var err = {
    key: 'page.error.javascript', 
    value: errorDescrip
  }
  
  window._204 = window._204 || [];
  window._204.push(err);
  
  window._gaq = window._gaq || [];
  window._gaq.push(err);
}</script>
<script type="text/javascript">
    // SET UP THE MULTITRACKER
        window.logger = window.Log({level:"error"});
        var parts = location.host.split(".");
    while(parts.length > 2) { parts.shift(); }

    window.multitracker = window.MultiTracker({logger:window.logger});
    window.multitracker.register('204', window._204 = window._204 || []);
    window.multitracker.register('ga', window._gaq = window._gaq || [], 'google');

    // SET UP GA and 204
    window._gaq.push(['_setAccount', 'UA-28377374-1']);
    window._gaq.push(['_setDomainName', 'coursera.org']);
    window._gaq.push(['_setAllowLinker', true]);  
    window._gaq.push(['_trackPageview']);
    
    // configure 204 with the following settings
    window._204.push(["client", "spark"]);
    window._204.push(["user", 1216070]);
    window._204.push(["domain", "." + parts.join(".")]);

    // set off the first event
    window._204.push({key:"pageview", val:{}});

    // override our multitracker queues with the ga queue when it is ready
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    
      ga.onload = ga.onreadystatechange = function() {
          ga.onreadystatechange = ga.onload = null;
          window.multitracker.get('ga').queue = window._gaq;
      };
    })();

    // override our multitracker queues with the 204 queue when it is ready
    (function() {
      var a = document.createElement('script'); a.type = 'text/javascript'; a.async = true;
      a.src = 'https://eventing.coursera.org/204.min.js';
      var s = document.getElementsByTagName('script')[0];
      s.parentNode.insertBefore(a, s);
      a.onload = a.onreadystatechange = function() {
          a.onreadystatechange = a.onload = null;
          window.multitracker.get('204').queue = window._204;
      };
    })();
</script>

<script>
  // Set up shared AB testing object
  (function() {
    window.ab = {};

    // we want to share the 204 session cookie with the AB session cookie...
    var sessionId = AB.makeSession("__204u", {expires:356, domain:"." + location.host});
        var debug = false;
    
    window.ab.user = window.AB(1216070, "user", {debug:debug, tracker:window.multitracker, logger:window.logger});
    window.ab.session = window.AB(sessionId, "session", {debug:debug, tracker:window.multitracker, logger:window.logger});

    if(window.CourseraABExperiments.user) {
        window.ab.user.addExperiments(window.CourseraABExperiments.user);
        window.ab.user.runExperimentsOn("body");
    }

    if(window.CourseraABExperiments.session) {
        window.ab.session.addExperiments(window.CourseraABExperiments.session);
        window.ab.session.runExperimentsOn("body");
    }
  })();
</script>


    <script>
      // Set up help widget
      (function() {
        $("[data-helpwidget]").each(function() {
            window.HelpWidget(this, {tracker: window.multitracker});
        });
       })();

        $("[data-readme]").each(function() {
            window.ReadMe(this);
        });
    </script>

    <script src="./Glossary_files/modal_focus.js" type="text/javascript"></script>
    <script src="./Glossary_files/get_query_parameters.js" type="text/javascript"></script>
    <script src="./Glossary_files/signature_track.js" type="text/javascript"></script>
    <script src="./Glossary_files/item_list.js" type="text/javascript"></script>
    <script src="./Glossary_files/navbar.js" type="text/javascript"></script>

    
    <script>
     // Set up help widget
      (function() {
        $("[data-helpwidget]").each(function() {
            window.HelpWidget(this, {tracker: window.multitracker});
        });
       })();
    </script>

        <script>
    (function() {
        $("<style type='text/css'> .coursera-reporter-link { display:inline-block;} </style>").appendTo("head");
    })();
    </script>
    
    <script type="text/x-mathjax-config;executed=true">
MathJax.Hub.Config({
  config: ["MMLorHTML.js"],
  
  styleSheets: [],
  styles: {},

  jax: ["input/TeX"],
  
  extensions: ["tex2jax.js"],

  preJax: null,
  postJax: null,

  preRemoveClass: "MathJax_Preview",

  showProcessingMessages: true,

  messageStyle: "none",
  
  displayAlign: "center",
  displayIndent: "0em",
  
  delayStartupUntil: "none",

  skipStartupTypeset: false,
  
  elements: [],
  
  tex2jax: {
	    inlineMath: [
	                 ['$$','$$'],      // uncomment this for standard TeX math delimiters
	                 ['\\(','\\)']
	                 ],

	                 displayMath: [
	                 ['\\[','\\]']
	                 ],

    skipTags: ["script","noscript","style","textarea","pre","code"],
    ignoreClass: "tex2jax_ignore",
    processClass: "tex2jax_process",
    processEscapes: false,
    processEnvironments: true,
    preview: "TeX"
    
  },
  
  mml2jax: {
    preview: "alttext"
    
  },
  
  jsMath2jax: {
    preview: "TeX"
    
  },

  TeX: {
    TagSide: "right",
    TagIndent: ".8em",
    MultLineWidth: "85%",
    Macros: {},

    extensions: ["AMSmath.js", "AMSsymbols.js"]
    
  },

  //============================================================================
  //
  //  These parameters control the MathML inupt jax.
  //
  MathML: {
    //
    //  This specifies whether to use TeX spacing or MathML spacing when the
    //  HTML-CSS output jax is used.
    //
    useMathMLspacing: false
  },
  
  //============================================================================
  //
  //  These parameters control the HTML-CSS output jax.
  //
  "HTML-CSS": {
    
    scale: 100,
    
    availableFonts: ["STIX","TeX"],
    
    preferredFont: "TeX",
    
    webFont: "TeX",
    
    imageFont: "TeX",
    
    undefinedFamily: "STIXGeneral,'Arial Unicode MS',serif",
      
    showMathMenu: true,

    styles: {},
    
    tooltip: {
      delayPost: 600,          // milliseconds delay before tooltip is posted after mouseover
      delayClear: 600,         // milliseconds delay before tooltip is cleared after mouseout
      offsetX: 10, offsetY: 5  // pixels to offset tooltip from mouse position
    }
  },
  
  //============================================================================
  //
  //  These parameters control the NativeMML output jax.
  //
  NativeMML: {

    scale: 100,

    showMathMenu: true,
    showMathMenuMSIE: true,

    styles: {}
  },
  
  MathMenu: {
    delay: 400,
    
    helpURL: "http://www.mathjax.org/help/user/",

    showRenderer: true,
    showFontMenu: false,
    showContext:  false,

    windowSettings: {
      status: "no", toolbar: "no", locationbar: "no", menubar: "no",
      directories: "no", personalbar: "no", resizable: "yes", scrollbars: "yes",
      width: 100, height: 50
    },
    
    styles: {}
    
  },

  MMLorHTML: {
    prefer: {
      MSIE:    "MML",
      Firefox: "MML",
      Opera:   "HTML",
      other:   "HTML"
    }
  }
});
</script>
<script type="text/javascript">
(function () {

  function loadMathJax() {
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.src  = "https://duqnjvq4jwr55.cloudfront.net/2.1/MathJax.js";
    document.getElementsByTagName("head")[0].appendChild(script);
  }

  window.loadOrRefreshMathJax = function(domId) {
    if (window.MathJax) {
      if (domId) {
        MathJax.Hub.Queue(["Typeset", MathJax.Hub, domId]);
      } else {
        MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
      }
    } else {
      loadMathJax();
    }
  }
})();
</script>
    <script type="text/javascript">
        var site_base_url = "https:\/\/www.coursera.org\/";
        var site_static_asset_url = "https:\/\/dt5zaw6a98blc.cloudfront.net\/site-static\/";
        var spark_class_short_name = "programdesign";
        var spark_class_id = 971286;
        var spark_class_url = "\/programdesign-002";
        var spark_signature_url = "https:\/\/class.coursera.org\/programdesign-002\/signature\/";

        var course_strings_name = "Introduction to Systematic Program Design - Part 1";
        var student_full_name = "Christopher Edward Beattie";
    </script>

    
<script type="text/javascript">$(function() { loadOrRefreshMathJax();})</script>
<script src="./Glossary_files/textbook_wiki.js"></script>




</body></html>
#lang racket
;; Section 2.1

;(car '(a b c))

;(cdr '(a b c))

;(cons 'a '(b c))

;(cons (car '(a b c))
;      (cdr '(d e f)))

;(define square
;  (lambda (n)
;    (* n n)))

;(define add1
;  (lambda (a)
;    (+ a 1)))

;(define reciprocal
;  (lambda (n)
;    (if (= n 0)
;        "oops!"
;        (/ 1 n))))

;; Exercise 2.2.1 -- convert arith. exp. to Scheme exp.
;; 1.2 * (2 - 1/3) + -8.7
;; (- (* 1.2 (- 2 (/ 1 3))) 8.7)
;; =====
;; (2/3 + 4/9) / (5/11 - 4/3)
; (define A (+ (/ 2 3) (/ 4 9)))
; (define B (- (/ 5 11) (/ 4 3)))
; (/ (+ (/ 2 3) (/ 4 9)) (- (/ 5 11) (/ 4 3)))
;; =====

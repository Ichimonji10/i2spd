<!DOCTYPE html>
<!-- saved from url=(0079)https://class.coursera.org/programdesign-002/wiki/view?page=DataDrivenTemplates -->
<html lang="en-US"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<title>Wiki - Data Driven Templates | Introduction to Systematic Program Design - Part 1</title>
<link rel="stylesheet" href="https://dt5zaw6a98blc.cloudfront.net/site-static/595ddfeac34ca20b470b491885b1acad3564b90f/css/spark.main.css">
<link rel="stylesheet" href="https://www.coursera.org/maestro/api/course/971286/course.css">
<link rel="icon" href="https://spark-public.s3.amazonaws.com/programdesign/static/images/favicon.ico">
<style type="text/css"> .coursera-reporter-link { display:inline-block;} </style><script type="text/javascript" src="./DataDriven-Templates_files/MathJax.js"></script><style type="text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1em; bottom: 1.5em; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type="text/css">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 2px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_MenuItem {padding: 2px 2em; background: transparent}
.MathJax_MenuTitle {background-color: #CCCCCC; margin: -1px -1px 1px -1px; text-align: center; font-style: italic; font-size: 80%; color: #444444; padding: 2px 0; overflow: hidden}
.MathJax_MenuArrow {position: absolute; right: .5em; color: #666666}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuRadioCheck {position: absolute; left: 1em}
.MathJax_MenuLabel {padding: 2px 2em 4px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #CCCCCC; margin: 4px 1px 0px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: Highlight; color: HighlightText}
.MathJax_Menu_Close {position: absolute; width: 31px; height: 31px; top: -15px; left: -15px}
</style><style type="text/css">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
</style></head>

<body><div id="MathJax_Message" style="display: none;"></div>
    <a href="https://class.coursera.org/programdesign-002/wiki/view?page=DataDrivenTemplates#course-page-content" class="hidden">Skip Navigation</a>
    <div class="hidden">
        This page features MathJax technology to render mathematical formulae.
        If you are using a screen reader, please visit <a href="http://www.dessci.com/en/products/mathplayer/">MathPlayer</a> to download the plugin for your browser. Please note that this is an Internet Explorer-only plugin at this time.
    </div>

    <h1 class="hidden">Introduction to Systematic Program Design - Part 1</h1>

    <script type="text/javascript" async="" src="./DataDriven-Templates_files/204.min.js"></script><script type="text/javascript" async="" src="./DataDriven-Templates_files/ga.js"></script><script>window.onerror = function(message, url, lineNum) {

  // First check the URL and line number of the error
  url = url || window.location.href;
  // 99% of the time, errors without line numbers arent due to our code,
  // they are due to third party plugins and browser extensions
  if (lineNum === undefined || lineNum == null) return;
  
  // Now figure out the actual error message
  // If it's an event, as triggered in several browsers
  if (message.target && message.type) {
    message = message.type;
  }
  if (!message.indexOf) {
    message = 'Non-string, non-event error: ' + (typeof message);
  }
  
  var errorDescrip = {
    message: message,
    script: url,
    line: lineNum,
    url: document.URL
  }
  
  var err = {
    key: 'page.error.javascript', 
    value: errorDescrip
  }
  
  window._204 = window._204 || [];
  window._204.push(err);
  
  window._gaq = window._gaq || [];
  window._gaq.push(err);
}</script>

<div class="course-topbar container-fluid" role="banner">

    <div class="row-fluid">

        <div class="span3">
          <a href="https://www.coursera.org/" class="course-topbar-logo" data-if-linkable="add-referrer"></a>
        </div>

        <div class="course-topbar-nav-container span9" style="float:right;">
            <h2 class="hidden">Top Navigation Bar</h2>

            <ul class="course-topbar-nav-list">
                <li class="course-topbar-nav-list-item">
                  <a href="https://www.coursera.org/courses" data-if-linkable="add-referrer">Courses</a>
                </li>

                
                <li class="course-topbar-nav-list-item" tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-topbar-my" data-popup="#course-topbar-my" data-popup-bind-open="mouseenter" data-popup-close="" style="cursor:pointer;" data-popup-direction="se">
                                        <a data-user-id="1216070">
                        Christopher Edward Beattie                        <i class="icon-caret-down"></i>
                    </a>
                </li>

                            </ul>
        </div>
    </div>

    <div id="course-topbar-aboutus" class="course-topbar-sublist">
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/jobs" target="_new" data-if-linkable="add-referrer">Jobs</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/team" target="_new" data-if-linkable="add-referrer">Team</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/contact" target="_new" data-if-linkable="add-referrer">Contact Us</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/" target="_new" data-if-linkable="add-referrer">About Us</a>
    </div>

    <div id="course-topbar-my" class="course-topbar-sublist">
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/" target="_new">My Courses</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/account/profile" target="_new">Profile</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/account/records" target="_new">Course Records</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/account/settings" target="_new">Settings</a>
                <a class="course-topbar-sublist-item" href="https://class.coursera.org/programdesign-002/class/preferences">Course Preferences</a>
        <a class="course-topbar-sublist-item" href="https://class.coursera.org/programdesign-002/auth/logout">Sign Out</a>
    </div>

</div>








<div class="course-topbanner-wrapper">
  <div class="course-topbanner">
    <div class="course-topbanner-university-logo">
      <a href="https://www.coursera.org/ubc" class="coursera-university-color" target="_blank" data-if-linkable="add-referrer" title="https://www.coursera.org/ubc">
        <img src="./DataDriven-Templates_files/university_logo" alt="ubc">
      </a>
    </div>

    
    <h1 class="course-topbanner-header">
      <a class="course-topbanner-name coursera-university-color" href="https://class.coursera.org/programdesign-002/class/index" data-if-linkable="modal-lock">
        Introduction to Systematic Program Design - Part 1      </a>
      <br>
      <span class="course-topbanner-instructor" style="">
        by  Gregor  Kiczales      </span>
    </h1>

  </div>
</div>

        <div class="container-fluid" style="position:relative;">
        <div class="row-fluid">
            <div id="course-page-sidebar" role="navigation">
                <div class="course-navbar-container">
	<a href="https://class.coursera.org/programdesign-002/class/index">
	<img src="./DataDriven-Templates_files/logo" style="width: 205px;height: 116px;margin: -15px 0px 8px 1px; box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.05);" alt="Course Home Page">
	</a>


<h2 class="hidden">Side Navigation Bar</h2>
<ul class="course-navbar-list">
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/class/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Announcements							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=CourseInformation" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Course Information							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=ToDoWellinThisCourse" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				To Do Well in This Course							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/forum/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Discussion Forums							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/quiz/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Quizzes							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/human_grading/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Peer Graded Problems							</a>
						</li>
	
		
	<li class="course-navbar-item">
					<h3>Reference</h3>
			</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=DesignRecipes" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Design Recipes							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Syllabus" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Syllabus							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Language" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Language							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=StyleRules" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Style Rules							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Glossary							</a>
						</li>
	
		
	<li class="course-navbar-item">
					<h3>Modules</h3>
			</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=BSLModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				1a Beginning Student Language							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=HtDFModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				1b How to Design Functions							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=HtDDModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				2 How to Design Data							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=HtDWModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				3a How to Design Worlds							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=CompoundModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				3b Compound							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=SelfRefModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				4a Self Reference							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=RefModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				4b Reference 							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=NatModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				5a Naturals							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=HelpersModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				5b Helpers							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=BSTsModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				6a Binary Search Trees							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=MutualRefModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				6b Mutual Reference							</a>
						</li>
	
		
	<li class="course-navbar-item">
					<h3>Additional Resources</h3>
			</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=AllProblems" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				All Problems							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=AllLectures" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				All Lectures							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/lecture/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				All Lectures (Classic)							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="http://www.ccs.neu.edu/home/matthias/HtDP2e/" target="_blank" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				HtDP/2e Book				<span class="icon-share"></span>			</a>
						</li>
	
	
		<li class="course-navbar-item">
		<a href="https://share.coursera.org/wiki/index.php/programdesign:Main" target="_blank" class="coursera-university-color" title="Open course wiki in new window">
			Course Wiki
			<span class="icon-share"></span>
		</a>
	</li>
		
		<li class="course-navbar-item">
		<a href="http://www.meetup.com/Coursera/" target="_blank" class="coursera-university-color">
			Join a Meetup
			<span class="icon-share"></span>
		</a>
	</li>
	
    </ul>

<ul style="list-style-type:none;margin-left: 10px;">
  <li><a href="http://help.coursera.org/" class="coursera-university-color" target="_blank" title="Open help articles in new window"><i class="icon-question-sign"></i> Help Articles</a></li>
</ul>

<ul style="list-style-type:none;margin-left: 10px;">
		<li><a href="https://class.coursera.org/programdesign-002/forum/list?forum_id=10000" class="coursera-university-color"><i class="icon-comments"></i> Course Materials Errors</a></li>
	<li><a href="https://class.coursera.org/programdesign-002/forum/list?forum_id=10001" class="coursera-university-color"><i class="icon-comments"></i> Technical Issues</a></li>

</ul>

</div>
            </div>
            <div id="course-page-content" role="main">
                                

<h2 class="course-page-header">
    Data Driven Templates    <a class="coursera-reporter-link" title="Click here if you&#39;re experiencing technical problems or found errors in the course materials." target="_blank" href="https://class.coursera.org/programdesign-002/help/pages?url=https%3A%2F%2Fclass.coursera.org%2Fprogramdesign-002%2Fwiki%2Fview%3Fpage%3DDataDrivenTemplates">
      Help
    </a>
    <a data-coursera-admin-helpwidget-link="" rel="help" href="https://class.coursera.org/mooc/help/pages/setup" title="Course Page Setup" style="display:none;">Learn more.</a>
</h2>

<div id="internal_html_page_content">

<p>
  Templates are the core structure that we know a function must have,
  independent of the details of its definition. In many cases the
  template for a function is determined by the type of data the
  function consumes. We refer to these as data driven templates. The
  recipe below can be used to produce a data driven template for any
  type comment. 
</p>

<p>
  For a given type <tt>TypeName</tt> the data driven template is:
</p>

<table border="none" cellpadding="10" style="border: 0px solid rgb(0, 0, 0);
              padding: 10px;"><tbody><tr>
<td>
<pre>(define (fn-for-type-name x)
  &lt;body&gt;)
</pre>
</td>
</tr></tbody></table>
<p>
  Where <tt>x</tt> is an appropriately chosen parameter name (often
  the initials of the type name) and the body is determined according
  to the table below.  To use the table, start with the type of the
  parameter, i.e. TypeName, and select the row of the table that
  matches that type. The first row matches only primitive types, the
  later rows match parts of type comments.
</p>

<p> 
  (Note that when designing functions that consume additional atomic
  parameters, the name of that parameter gets added after
  every <tt>...</tt> in the template. Templates for functions with
  additional complex paremeters are covered in <a href="https://class.coursera.org/programdesign-002/wiki/view?page=FunctionsOn2OneOfData">Functions on 2 One-Of Data</a>.)
</p>


<table border="1" cellpadding="5" style="text-align: left; vertical-align:text-top;">
<thead><tr>
<th style="width: 30%">
	Type of data
      </th>
      
      <th style="width: 25%">
	<tt>cond</tt> question (if applicable)
      </th>
      
      <th style="width: 45%">
	Body or <tt>cond</tt> answer (if applicable)
      </th>
    </tr></thead>
<tbody>
<tr style="text-align: left; vertical-align:text-top;">
<td>
      <p><strong>Atomic Non-Distinct</strong></p>
      <ul>
<li><tt>Number</tt></li>
        <li><tt>String</tt></li>
        <li><tt>Boolean</tt></li>
        <li><tt>Image</tt></li>
        <li>interval like <tt>Number[0, 10)</tt>
</li>
	<li>etc.</li>
      </ul>
</td>

    <td>
      <p>Appropriate predicate</p>
      <ul>
<li><tt>(number? x)</tt></li>
        <li><tt>(string? x)</tt></li>
        <li><tt>(boolean? x)</tt></li>
        <li><tt>(image? x)</tt></li>
        <li>
<tt>(and (&lt;= 0 x)</tt><br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&lt; x 10))</tt>
</li>
	<li>etc.</li>
      </ul>
</td>

    <td>
      <p> Expression that operates on the parameter.</p>
      <p> <tt>(... x)</tt></p>
    </td>
  </tr>
<tr style="text-align: left; vertical-align:text-top;">
<td>
      <p><strong>Atomic Distinct Value</strong></p>
      <ul>
<li><tt>"red"</tt></li>
        <li><tt>false</tt></li>
        <li><tt>empty</tt></li>
	<li>etc.</li>
      </ul>
</td>

    <td>
      <p>Appropriate predicate</p>
      <ul>
<li><tt>(string=? x "red")</tt></li>
        <li><tt>(false? x)</tt></li>
        <li><tt>(empty? x)</tt></li>
	<li>etc.</li>
      </ul>
</td>

    <td>
      <p>Since value is distinct, parameter does not appear.</p>
      <p> <tt>(...)</tt></p>
    </td>
  </tr>
<tr style="text-align: left; vertical-align:text-top;">
<td>
      <p><strong>One Of</strong></p>
      <ul>
<li> enumerations</li>
        <li> itemizations</li>
      </ul>
</td>

    <td>
    </td>

    <td>
      <p> Cond with one clause per subclass of one of.</p>
      <p> <tt>(cond [&lt;question1&gt; &lt;answer1&gt;]<br></tt>
          <tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&lt;question2&gt; &lt;answer2&gt;])</tt>
      </p>
      <p>
	Where each question and answer expression is formed by following the rule in the question 
	or answer column of this table for the corresponding case. A detailed derivation of a
	template for a one-of type appears below.
      </p>
      <p>
	It is permissible to use <tt>else</tt> for the last question
	for itemizations and large enumerations. Normal enumerations
	should not use else.
      </p>      
      <p> Note that in a <i>mixed data itemization</i>, such as</p>
      <p> <tt>;; Measurement is one of:</tt><br><tt>;;   - Number[-10, 0)</tt><br><tt>;;   - true</tt><br><tt>;;   - Number(0, 10]</tt></p>
      <p> 
	the cond questions must be <strong>guarded</strong> with an appropriate type predicate. In 
	particular, the first cond question for <tt>Measurement</tt> must be
      </p>
      <p> <tt>(and (number? m)</tt><br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&lt;= -10 m)</tt><br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&lt; m 0))</tt></p>
      <p> 
	where the call to <tt>number?</tt> guards the calls
	to <tt>&lt;=</tt> and <tt>&lt;</tt>. This will protect
	<tt>&lt;=</tt> and <tt>&lt;</tt> from ever receiving
	true as an argument.
      </p>
    </td>
  </tr>
<tr style="text-align: left; vertical-align:text-top;">
<td>
      <p><strong>Compound</strong></p>
      <ul>
<li><tt>Position</tt></li>
        <li><tt>Firework</tt></li>
        <li><tt>Ball</tt></li>
        <li>cons</li>
	<li> etc.</li>
      </ul>
</td>

    <td>
      <p>Predicate from structure</p>
      <ul>
<li><tt>(posn? x)</tt></li>
        <li><tt>(firework? x)</tt></li>
        <li><tt>(ball? x)</tt></li>
        <li>
<tt>(cons? x)</tt> (often just else)</li>
	<li> etc.</li>
      </ul>
</td>

    <td>
      <p> All selectors.</p> 
      <ul>
<li><tt>(... (posn-x x) (posn-y x))</tt></li>
        <li><tt>(... (firework-y x) (firework-color x))</tt></li>
        <li><tt>(... (ball-x x) (ball-dx x))</tt></li>
        <li><tt>(... (first x) (rest x))</tt></li>
	<li> etc.</li>
      </ul>
<br><p> 
	Then consider the result type of each selector call and wrap
	the accessor expression appropriately using the table with
	that type. So for example, if after adding all the selectors
	you have:
      </p>
      <p> <tt>(... (game-ball g)    ;produces Ball</tt><br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(game-paddle g)) ;produces Paddle</tt></p>

      <p> Then, because both Ball and Paddle are non-primitive types (types that you yourself
	defined in a data definition) the reference rule (immediately below) says that you should 
	add calls to those types' template functions as follows:</p>
      <p> <tt> (... (fn-for-ball (game-ball g))</tt><br><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(fn-for-paddle (game-paddle g)))</tt></p>
    </td>
  </tr>
<tr style="text-align: left; vertical-align:text-top;">
<td>
      <p><strong>Other Non-Primitive Type Reference</strong></p>
    </td>

    <td>
      <p>Predicate, usually from structure definition</p>
      <ul>
<li><tt>(firework? x)</tt></li>
        <li><tt>(person? x)</tt></li>
      </ul>
</td>

    <td>
      <p> Call to other type's template function</p>
      <ul>
<li><tt>(fn-for-firework x)</tt></li>
        <li><tt>(fn-for-person x)</tt></li>
      </ul>
</td>
  </tr>
<tr style="text-align: left; vertical-align:text-top;">
<td>
      <p><strong>Self Reference</strong></p>
    </td>

    <td>
    </td>

    <td>
      <p>Form natural recursion with call to this type's template function:</p>
      <ul>
<li><tt>(fn-for-los (rest los))</tt></li>
      </ul>
</td>
  </tr>
<tr style="text-align: left; vertical-align:text-top;">
<td>
      <p><strong>Mutual Reference</strong></p>
      <br><p> Note: form and group all templates in mutual reference cycle together.</p>
    </td>

    <td>
    </td>

    <td>
      <p>Call to other type's template function:</p>
      <p> <tt>(fn-for-lod (dir-subdirs d)</tt><br><tt>(fn-for-dir (first lod))</tt></p>
    </td>
  </tr>
</tbody>
</table>
<br><h4>Producing the Template for an Example One Of Type</h4>

<p>In many cases more than one of the above rules will apply to a single template. 

Consider this type comment:</p>
<p>

</p>
<p><tt>;; Clock is one of:</tt><br><tt>;;  - Natural</tt><br><tt>;;  - false</tt></p>

<p>and the step-by-step construction of the template for a function operating on <tt>Clock</tt>.</p>

<table title="Clock Template Derivation" border="none" cellpadding="10" style="border: 0px solid rgb(0, 0, 0);
              padding: 10px;
	      text-align: left;
	      vertical-align: top;"><tbody>
<tr style="text-align: left; vertical-align:text-top;">
<td>
      <pre>(define (fn-for-clock c)
  (cond [Q A]
        [Q A]))

;; Template rules used:
;;  - one of: 2 cases
      </pre>
    </td>

    <td style="width: 65%">
      <tt>Clock</tt> is a one of type with two subclasses (one of
      which is not distinct making it an itemization). The one of rule
      tells us to use a <tt>cond</tt>. The <tt>cond</tt> needs one
      clause for each subclass of the itemization.
    </td>
  </tr>
<tr style="text-align: left; vertical-align:text-top;">
<td>
      <pre>(define (fn-for-clock c)
  (cond [(number? c) (... c)]
        [Q A]))

;; Template rules used:
;;  - one of: 2 cases
;;  - atomic non-distinct: Natural
      </pre>
      </td>

    <td>
      <p>
	The <tt>cond</tt> questions need to identify each subclass of
	data. The <tt>cond</tt> answers need to follow templating
	rules for that subclasses data.  In the first
	subclass, <tt>Natural</tt> is a non-distinct type;
	the <i>atomic non-distinct rule</i> tells us the question and
	answer as shown to the left.
      </p>
    </td>
  </tr>
<tr style="text-align: left; vertical-align:text-top;">
<td>
      <pre>(define (fn-for-clock c)
  (cond [(number? c) (... c)]
        [else
         (...)]))

;; Template rules used:
;;  - one of: 2 cases
;;  - atomic non-distinct: Natural
;;  - atomic distinct: false
      </pre>
    </td>

    <td>
      <p>
	In the second case <tt>false</tt> is an atomic distinct type,
	so the <i>atomic-distinct rule</i> gives us the question and
	answer. Since the second case is also the last case we can
	use <tt>else</tt> for the question.
      </p>
    </td>
  </tr>
</tbody></table>
<h4>Templates for Mutually Referential Types</h4>

<p>
  The previous example doesn't cover the <i>mutual-reference rule</i>
  (), which says that in the case of mutually self-referential data
  definitions, when you template one function in the self-reference
  cycle you should <strong>immediately template all the functions in the
  self-reference cycle</strong>.  So, for example, given:
</p>

<table title="Time Data Definition" border="none" cellpadding="10" style="border: 0px solid rgb(0, 0, 0);
              padding: 10px;"><tbody><tr>
<td>
<pre>(define-struct person (name subs))
;; Person is (make-person String ListOfPerson)

;; ListOfPerson is one of:
;;  - empty
;;  - (cons Person ListOfPerson)</pre>
</td>
</tr></tbody></table>
<p>Then if you need a template for a function operating on a <tt>Person</tt> (or a 

function operating on a <tt>ListOfPerson</tt>) you should immediately write a template for 

both functions, resulting in something like this:</p>

<table title="Time Data Definition" border="none" cellpadding="10" style="border: 0px solid rgb(0, 0, 0);
              padding: 10px;"><tbody><tr>
<td>
<pre>#;
(define (fn-for-person p)
  (... (person-name p)
       (fn-for-lop (person-subs p))))  ;mutual recursion from mutual-reference

#;
(define (fn-for-lop lop)
  (cond [(empty? lop) ...]
        [else
         (... (fn-for-person (first lop))  ;mutual recursion from mutual-reference
              (fn-for-lop (rest lop)))]))  ;natural recursion from self-reference</pre>
</td>
</tr></tbody></table>
<p>(Note that producing that template will also involve using the atomic-distinct, atomic, 

one-of and compound rules.)</p>

<p>As with self-reference, its a good idea to draw a mutual-reference line on the data 

definition and ensure you have corresponding mutual recursion lines in your templates.</p>

<h4>Testing</h4>

<p>
  The principles above can also be used to understand how many tests a data definition
  implies. Simply put, the set of tests/examples should cover all cases, call all helper 
  functions, involve all selectors, and avoid duplicated values.
</p>


<h4>Additional Design Rules for Helpers</h4>

<p>During coding three additional guidelines suggest situations under which a helper 

function should be added:</p>

<ol>
<li>Use a separate function for each difference between quantities in a problem.</li>
  <li>If a subtask requires operating on arbitrary sized data a helper function must be 

used.</li>
  <li>If a subtask involves special domain knowledge a helper function should be 

used.</li>
  <li>In addition always keep the "one task per function" goal in mind. If part of a 

function you are designing seems to be a well-defined subtask put that into a helper 

function.</li>
</ol>
</div>
<hr>
<div>
    <div style="float:left">
    	    	    </div>
    <div style="float:right;text-align:right;font-size:10px;">
    	Created Thu 21 Feb 2013  2:08 PM EST (UTC -0500)<br>
    	Last Modified Thu 12 Sep 2013 10:07 AM EDT (UTC -0400)    </div>
</div>

            </div>
        </div>
    </div>
        
    
    <script src="./DataDriven-Templates_files/spark.js"></script>

<script>window.onerror = function(message, url, lineNum) {

  // First check the URL and line number of the error
  url = url || window.location.href;
  // 99% of the time, errors without line numbers arent due to our code,
  // they are due to third party plugins and browser extensions
  if (lineNum === undefined || lineNum == null) return;
  
  // Now figure out the actual error message
  // If it's an event, as triggered in several browsers
  if (message.target && message.type) {
    message = message.type;
  }
  if (!message.indexOf) {
    message = 'Non-string, non-event error: ' + (typeof message);
  }
  
  var errorDescrip = {
    message: message,
    script: url,
    line: lineNum,
    url: document.URL
  }
  
  var err = {
    key: 'page.error.javascript', 
    value: errorDescrip
  }
  
  window._204 = window._204 || [];
  window._204.push(err);
  
  window._gaq = window._gaq || [];
  window._gaq.push(err);
}</script>
<script type="text/javascript">
    // SET UP THE MULTITRACKER
        window.logger = window.Log({level:"error"});
        var parts = location.host.split(".");
    while(parts.length > 2) { parts.shift(); }

    window.multitracker = window.MultiTracker({logger:window.logger});
    window.multitracker.register('204', window._204 = window._204 || []);
    window.multitracker.register('ga', window._gaq = window._gaq || [], 'google');

    // SET UP GA and 204
    window._gaq.push(['_setAccount', 'UA-28377374-1']);
    window._gaq.push(['_setDomainName', 'coursera.org']);
    window._gaq.push(['_setAllowLinker', true]);  
    window._gaq.push(['_trackPageview']);
    
    // configure 204 with the following settings
    window._204.push(["client", "spark"]);
    window._204.push(["user", 1216070]);
    window._204.push(["domain", "." + parts.join(".")]);

    // set off the first event
    window._204.push({key:"pageview", val:{}});

    // override our multitracker queues with the ga queue when it is ready
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    
      ga.onload = ga.onreadystatechange = function() {
          ga.onreadystatechange = ga.onload = null;
          window.multitracker.get('ga').queue = window._gaq;
      };
    })();

    // override our multitracker queues with the 204 queue when it is ready
    (function() {
      var a = document.createElement('script'); a.type = 'text/javascript'; a.async = true;
      a.src = 'https://eventing.coursera.org/204.min.js';
      var s = document.getElementsByTagName('script')[0];
      s.parentNode.insertBefore(a, s);
      a.onload = a.onreadystatechange = function() {
          a.onreadystatechange = a.onload = null;
          window.multitracker.get('204').queue = window._204;
      };
    })();
</script>

<script>
  // Set up shared AB testing object
  (function() {
    window.ab = {};

    // we want to share the 204 session cookie with the AB session cookie...
    var sessionId = AB.makeSession("__204u", {expires:356, domain:"." + location.host});
        var debug = false;
    
    window.ab.user = window.AB(1216070, "user", {debug:debug, tracker:window.multitracker, logger:window.logger});
    window.ab.session = window.AB(sessionId, "session", {debug:debug, tracker:window.multitracker, logger:window.logger});

    if(window.CourseraABExperiments.user) {
        window.ab.user.addExperiments(window.CourseraABExperiments.user);
        window.ab.user.runExperimentsOn("body");
    }

    if(window.CourseraABExperiments.session) {
        window.ab.session.addExperiments(window.CourseraABExperiments.session);
        window.ab.session.runExperimentsOn("body");
    }
  })();
</script>


    <script>
      // Set up help widget
      (function() {
        $("[data-helpwidget]").each(function() {
            window.HelpWidget(this, {tracker: window.multitracker});
        });
       })();

        $("[data-readme]").each(function() {
            window.ReadMe(this);
        });
    </script>

    <script src="./DataDriven-Templates_files/modal_focus.js" type="text/javascript"></script>
    <script src="./DataDriven-Templates_files/get_query_parameters.js" type="text/javascript"></script>
    <script src="./DataDriven-Templates_files/signature_track.js" type="text/javascript"></script>
    <script src="./DataDriven-Templates_files/item_list.js" type="text/javascript"></script>
    <script src="./DataDriven-Templates_files/navbar.js" type="text/javascript"></script>

    
    <script>
     // Set up help widget
      (function() {
        $("[data-helpwidget]").each(function() {
            window.HelpWidget(this, {tracker: window.multitracker});
        });
       })();
    </script>

        <script>
    (function() {
        $("<style type='text/css'> .coursera-reporter-link { display:inline-block;} </style>").appendTo("head");
    })();
    </script>
    
    <script type="text/x-mathjax-config;executed=true">
MathJax.Hub.Config({
  config: ["MMLorHTML.js"],
  
  styleSheets: [],
  styles: {},

  jax: ["input/TeX"],
  
  extensions: ["tex2jax.js"],

  preJax: null,
  postJax: null,

  preRemoveClass: "MathJax_Preview",

  showProcessingMessages: true,

  messageStyle: "none",
  
  displayAlign: "center",
  displayIndent: "0em",
  
  delayStartupUntil: "none",

  skipStartupTypeset: false,
  
  elements: [],
  
  tex2jax: {
	    inlineMath: [
	                 ['$$','$$'],      // uncomment this for standard TeX math delimiters
	                 ['\\(','\\)']
	                 ],

	                 displayMath: [
	                 ['\\[','\\]']
	                 ],

    skipTags: ["script","noscript","style","textarea","pre","code"],
    ignoreClass: "tex2jax_ignore",
    processClass: "tex2jax_process",
    processEscapes: false,
    processEnvironments: true,
    preview: "TeX"
    
  },
  
  mml2jax: {
    preview: "alttext"
    
  },
  
  jsMath2jax: {
    preview: "TeX"
    
  },

  TeX: {
    TagSide: "right",
    TagIndent: ".8em",
    MultLineWidth: "85%",
    Macros: {},

    extensions: ["AMSmath.js", "AMSsymbols.js"]
    
  },

  //============================================================================
  //
  //  These parameters control the MathML inupt jax.
  //
  MathML: {
    //
    //  This specifies whether to use TeX spacing or MathML spacing when the
    //  HTML-CSS output jax is used.
    //
    useMathMLspacing: false
  },
  
  //============================================================================
  //
  //  These parameters control the HTML-CSS output jax.
  //
  "HTML-CSS": {
    
    scale: 100,
    
    availableFonts: ["STIX","TeX"],
    
    preferredFont: "TeX",
    
    webFont: "TeX",
    
    imageFont: "TeX",
    
    undefinedFamily: "STIXGeneral,'Arial Unicode MS',serif",
      
    showMathMenu: true,

    styles: {},
    
    tooltip: {
      delayPost: 600,          // milliseconds delay before tooltip is posted after mouseover
      delayClear: 600,         // milliseconds delay before tooltip is cleared after mouseout
      offsetX: 10, offsetY: 5  // pixels to offset tooltip from mouse position
    }
  },
  
  //============================================================================
  //
  //  These parameters control the NativeMML output jax.
  //
  NativeMML: {

    scale: 100,

    showMathMenu: true,
    showMathMenuMSIE: true,

    styles: {}
  },
  
  MathMenu: {
    delay: 400,
    
    helpURL: "http://www.mathjax.org/help/user/",

    showRenderer: true,
    showFontMenu: false,
    showContext:  false,

    windowSettings: {
      status: "no", toolbar: "no", locationbar: "no", menubar: "no",
      directories: "no", personalbar: "no", resizable: "yes", scrollbars: "yes",
      width: 100, height: 50
    },
    
    styles: {}
    
  },

  MMLorHTML: {
    prefer: {
      MSIE:    "MML",
      Firefox: "MML",
      Opera:   "HTML",
      other:   "HTML"
    }
  }
});
</script>
<script type="text/javascript">
(function () {

  function loadMathJax() {
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.src  = "https://duqnjvq4jwr55.cloudfront.net/2.1/MathJax.js";
    document.getElementsByTagName("head")[0].appendChild(script);
  }

  window.loadOrRefreshMathJax = function(domId) {
    if (window.MathJax) {
      if (domId) {
        MathJax.Hub.Queue(["Typeset", MathJax.Hub, domId]);
      } else {
        MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
      }
    } else {
      loadMathJax();
    }
  }
})();
</script>
    <script type="text/javascript">
        var site_base_url = "https:\/\/www.coursera.org\/";
        var site_static_asset_url = "https:\/\/dt5zaw6a98blc.cloudfront.net\/site-static\/";
        var spark_class_short_name = "programdesign";
        var spark_class_id = 971286;
        var spark_class_url = "\/programdesign-002";
        var spark_signature_url = "https:\/\/class.coursera.org\/programdesign-002\/signature\/";

        var course_strings_name = "Introduction to Systematic Program Design - Part 1";
        var student_full_name = "Christopher Edward Beattie";
    </script>

    
<script type="text/javascript">$(function() { loadOrRefreshMathJax();})</script>
<script src="./DataDriven-Templates_files/textbook_wiki.js"></script>




</body></html>
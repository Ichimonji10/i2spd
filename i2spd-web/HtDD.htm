<!DOCTYPE html>
<!-- saved from url=(0067)https://class.coursera.org/programdesign-002/wiki/view?page=HtDData -->
<html lang="en-US"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<title>Wiki - How to Design Data (HtDD) | Introduction to Systematic Program Design - Part 1</title>
<link rel="stylesheet" href="https://dt5zaw6a98blc.cloudfront.net/site-static/595ddfeac34ca20b470b491885b1acad3564b90f/css/spark.main.css">
<link rel="stylesheet" href="https://www.coursera.org/maestro/api/course/971286/course.css">
<link rel="icon" href="https://spark-public.s3.amazonaws.com/programdesign/static/images/favicon.ico">
<style type="text/css"> .coursera-reporter-link { display:inline-block;} </style><script type="text/javascript" src="./HtDD_files/MathJax.js"></script><style type="text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1em; bottom: 1.5em; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type="text/css">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 2px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_MenuItem {padding: 2px 2em; background: transparent}
.MathJax_MenuTitle {background-color: #CCCCCC; margin: -1px -1px 1px -1px; text-align: center; font-style: italic; font-size: 80%; color: #444444; padding: 2px 0; overflow: hidden}
.MathJax_MenuArrow {position: absolute; right: .5em; color: #666666}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuRadioCheck {position: absolute; left: 1em}
.MathJax_MenuLabel {padding: 2px 2em 4px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #CCCCCC; margin: 4px 1px 0px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: Highlight; color: HighlightText}
.MathJax_Menu_Close {position: absolute; width: 31px; height: 31px; top: -15px; left: -15px}
</style><style type="text/css">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
</style></head>

<body><div id="MathJax_Message" style="display: none;"></div>
    <a href="https://class.coursera.org/programdesign-002/wiki/view?page=HtDData#course-page-content" class="hidden">Skip Navigation</a>
    <div class="hidden">
        This page features MathJax technology to render mathematical formulae.
        If you are using a screen reader, please visit <a href="http://www.dessci.com/en/products/mathplayer/">MathPlayer</a> to download the plugin for your browser. Please note that this is an Internet Explorer-only plugin at this time.
    </div>

    <h1 class="hidden">Introduction to Systematic Program Design - Part 1</h1>

    <script type="text/javascript" async="" src="./HtDD_files/204.min.js"></script><script type="text/javascript" async="" src="./HtDD_files/ga.js"></script><script>window.onerror = function(message, url, lineNum) {

  // First check the URL and line number of the error
  url = url || window.location.href;
  // 99% of the time, errors without line numbers arent due to our code,
  // they are due to third party plugins and browser extensions
  if (lineNum === undefined || lineNum == null) return;
  
  // Now figure out the actual error message
  // If it's an event, as triggered in several browsers
  if (message.target && message.type) {
    message = message.type;
  }
  if (!message.indexOf) {
    message = 'Non-string, non-event error: ' + (typeof message);
  }
  
  var errorDescrip = {
    message: message,
    script: url,
    line: lineNum,
    url: document.URL
  }
  
  var err = {
    key: 'page.error.javascript', 
    value: errorDescrip
  }
  
  window._204 = window._204 || [];
  window._204.push(err);
  
  window._gaq = window._gaq || [];
  window._gaq.push(err);
}</script>

<div class="course-topbar container-fluid" role="banner">

    <div class="row-fluid">

        <div class="span3">
          <a href="https://www.coursera.org/" class="course-topbar-logo" data-if-linkable="add-referrer"></a>
        </div>

        <div class="course-topbar-nav-container span9" style="float:right;">
            <h2 class="hidden">Top Navigation Bar</h2>

            <ul class="course-topbar-nav-list">
                <li class="course-topbar-nav-list-item">
                  <a href="https://www.coursera.org/courses" data-if-linkable="add-referrer">Courses</a>
                </li>

                
                <li class="course-topbar-nav-list-item" tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-topbar-my" data-popup="#course-topbar-my" data-popup-bind-open="mouseenter" data-popup-close="" style="cursor:pointer;" data-popup-direction="se">
                                        <a data-user-id="1216070">
                        Christopher Edward Beattie                        <i class="icon-caret-down"></i>
                    </a>
                </li>

                            </ul>
        </div>
    </div>

    <div id="course-topbar-aboutus" class="course-topbar-sublist">
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/jobs" target="_new" data-if-linkable="add-referrer">Jobs</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/team" target="_new" data-if-linkable="add-referrer">Team</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/contact" target="_new" data-if-linkable="add-referrer">Contact Us</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/about/" target="_new" data-if-linkable="add-referrer">About Us</a>
    </div>

    <div id="course-topbar-my" class="course-topbar-sublist">
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/" target="_new">My Courses</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/account/profile" target="_new">Profile</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/account/records" target="_new">Course Records</a>
        <a class="course-topbar-sublist-item" href="https://www.coursera.org/account/settings" target="_new">Settings</a>
                <a class="course-topbar-sublist-item" href="https://class.coursera.org/programdesign-002/class/preferences">Course Preferences</a>
        <a class="course-topbar-sublist-item" href="https://class.coursera.org/programdesign-002/auth/logout">Sign Out</a>
    </div>

</div>








<div class="course-topbanner-wrapper">
  <div class="course-topbanner">
    <div class="course-topbanner-university-logo">
      <a href="https://www.coursera.org/ubc" class="coursera-university-color" target="_blank" data-if-linkable="add-referrer" title="https://www.coursera.org/ubc">
        <img src="./HtDD_files/university_logo" alt="ubc">
      </a>
    </div>

    
    <h1 class="course-topbanner-header">
      <a class="course-topbanner-name coursera-university-color" href="https://class.coursera.org/programdesign-002/class/index" data-if-linkable="modal-lock">
        Introduction to Systematic Program Design - Part 1      </a>
      <br>
      <span class="course-topbanner-instructor" style="">
        by  Gregor  Kiczales      </span>
    </h1>

  </div>
</div>

        <div class="container-fluid" style="position:relative;">
        <div class="row-fluid">
            <div id="course-page-sidebar" role="navigation">
                <div class="course-navbar-container">
	<a href="https://class.coursera.org/programdesign-002/class/index">
	<img src="./HtDD_files/logo" style="width: 205px;height: 116px;margin: -15px 0px 8px 1px; box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.05);" alt="Course Home Page">
	</a>


<h2 class="hidden">Side Navigation Bar</h2>
<ul class="course-navbar-list">
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/class/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Announcements							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=CourseInformation" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Course Information							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=ToDoWellinThisCourse" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				To Do Well in This Course							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/forum/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Discussion Forums							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/quiz/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Quizzes							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/human_grading/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Peer Graded Problems							</a>
						</li>
	
		
	<li class="course-navbar-item">
					<h3>Reference</h3>
			</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=DesignRecipes" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Design Recipes							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Syllabus" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Syllabus							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Language" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Language							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=StyleRules" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Style Rules							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=Glossary" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				Glossary							</a>
						</li>
	
		
	<li class="course-navbar-item">
					<h3>Modules</h3>
			</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=BSLModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				1a Beginning Student Language							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=HtDFModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				1b How to Design Functions							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=HtDDModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				2 How to Design Data							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=HtDWModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				3a How to Design Worlds							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=CompoundModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				3b Compound							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=SelfRefModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				4a Self Reference							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=RefModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				4b Reference 							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=NatModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				5a Naturals							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=HelpersModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				5b Helpers							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=BSTsModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				6a Binary Search Trees							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=MutualRefModule" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				6b Mutual Reference							</a>
						</li>
	
		
	<li class="course-navbar-item">
					<h3>Additional Resources</h3>
			</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=AllProblems" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				All Problems							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/wiki/view?page=AllLectures" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				All Lectures							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="https://class.coursera.org/programdesign-002/lecture/index" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				All Lectures (Classic)							</a>
						</li>
	
		
	<li class="course-navbar-item">
								<a href="http://www.ccs.neu.edu/home/matthias/HtDP2e/" target="_blank" data-if-linkable="modal-lock,gray,lock-icon" class="coursera-university-color">
				
				HtDP/2e Book				<span class="icon-share"></span>			</a>
						</li>
	
	
		<li class="course-navbar-item">
		<a href="https://share.coursera.org/wiki/index.php/programdesign:Main" target="_blank" class="coursera-university-color" title="Open course wiki in new window">
			Course Wiki
			<span class="icon-share"></span>
		</a>
	</li>
		
		<li class="course-navbar-item">
		<a href="http://www.meetup.com/Coursera/" target="_blank" class="coursera-university-color">
			Join a Meetup
			<span class="icon-share"></span>
		</a>
	</li>
	
    </ul>

<ul style="list-style-type:none;margin-left: 10px;">
  <li><a href="http://help.coursera.org/" class="coursera-university-color" target="_blank" title="Open help articles in new window"><i class="icon-question-sign"></i> Help Articles</a></li>
</ul>

<ul style="list-style-type:none;margin-left: 10px;">
		<li><a href="https://class.coursera.org/programdesign-002/forum/list?forum_id=10000" class="coursera-university-color"><i class="icon-comments"></i> Course Materials Errors</a></li>
	<li><a href="https://class.coursera.org/programdesign-002/forum/list?forum_id=10001" class="coursera-university-color"><i class="icon-comments"></i> Technical Issues</a></li>

</ul>

</div>
            </div>
            <div id="course-page-content" role="main">
                                

<h2 class="course-page-header">
    How to Design Data (HtDD)    <a class="coursera-reporter-link" title="Click here if you&#39;re experiencing technical problems or found errors in the course materials." target="_blank" href="https://class.coursera.org/programdesign-002/help/pages?url=https%3A%2F%2Fclass.coursera.org%2Fprogramdesign-002%2Fwiki%2Fview%3Fpage%3DHtDData">
      Help
    </a>
    <a data-coursera-admin-helpwidget-link="" rel="help" href="https://class.coursera.org/mooc/help/pages/setup" title="Course Page Setup" style="display:none;">Learn more.</a>
</h2>

<div id="internal_html_page_content">

<p>Data definitions are a driving element in the design recipes.</p>
<p>A data definition establishes the represent/interpret relationship between information and data:</p>
<ul>
<li>Information in the program's domain is represented by data in the program.</li>
    <li>Data in the program can be interpreted as information in the program's domain.
    </li>
</ul>
<p>A data definition must describe how to form (or make) data that satisfies the data definition and also how to tell whether a data value satisfies the data definition. It must also describe how to represent information in the program's domain as data and
    interpret a data value as information.</p>
<p>So, for example, one data definition might say that numbers are used to represent the <tt>Speed</tt> of a ball. Another data definition might say that numbers are used to represent the <tt>Height</tt> of an airplane. So given a number like 6, we need a data
    definition to tell us how to interpret it: is it a <tt>Speed</tt>, or a <tt>Height</tt>
    or something else entirely. Without a data definition, the 6 could mean anything.</p>
<table title="Data Definitions." border="1" cellpadding="15" style="border: 1px solid rgb(0, 0, 0);
              padding: 15px; 
	      text-align: left;
	      horizontal-align: left; 
	      vertical-align: top;
	      max-width: 90%"><tbody><tr>
<td>
                <p>The first step of the recipe is to identify the inherent structure of the information.</p>
                <p>Once that is done, a data definition consists of four or five elements:</p>
                <ol>
<li>A possible <strong>structure definition</strong> (not until compound data)</li>
                    <li>A <strong>type comment</strong> that defines a new type name and describes how to form data of that type.</li>
                    <li>An <strong>interpretation</strong> that describes the correspondence between information and data.</li>
                    <li>One or more <strong>examples</strong> of the data.</li>
                    <li>A <strong>template</strong> for a 1 argument function operating on data of this type.</li>
                </ol>
<p>
                    <emph>In the first weeks of the course we also ask you to include a list of the <strong>template rules</strong> used to form the template.</emph></p>
                <p></p>
            </td>
        </tr></tbody></table>
<br><hr>
<hr>
<h3>What is the Inherent Structure of the Information?</h3>

<p>One of the most important points in the course is that:</p>
<ul>
<li>the <strong>structure of the information</strong> in the program's domain determines the kind of data definition used,</li>
    <li>which in turn determines <strong>the structure of the
  templates</strong> and helps determine the function examples (<tt>check-expect</tt>s),</li>
    <li>and therefore the <strong>structure of much of the final program
  design</strong>.</li>
</ul>
<p>The remainder of this page lists in detail different kinds of data definition that are used to represent information with different structures. The page also shows in detail how to design a data definition of each kind. This summary table provides a quick
    reference to which kind of data definition to use for different information structures.</p>
<table cellpadding="5" border="1" frame="box" summary="Contents" rules="all" style="border: 1px solid rgb(0, 0, 0); 
	      horizontal-align: left; 
	      text-align: left;
	      vertical-align: top;">
<tbody><tr style="text-align: left;"></tr></tbody>
<thead><tr>
<th>When the form of the information to be represented...</th>
            <th>Use a data definition of this kind</th>
        </tr></thead>
<tbody>
<tr>
<td>is atomic</td>
            <td>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=HtDData#S1">Simple Atomic Data</a>
            </td>
        </tr>
<tr>
<td>is numbers within a certain range</td>
            <td>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=HtDData#S2">Interval</a>
            </td>
        </tr>
<tr>
<td>consists of a fixed number of distinct items</td>
            <td>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=HtDData#S3">Enumeration</a>
            </td>
        </tr>
<tr>
<td>is comprised of 2 or more subclasses, at least one of which is not a distinct item</td>
            <td>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=HtDData#S4">Itemization</a>
            </td>
        </tr>
<tr>
<td>consists of two or more items that naturally belong together</td>
            <td>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=HtDData#S5">Compound data</a>
            </td>
        </tr>
<tr>
<td>is naturally composed of different parts</td>
            <td>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=HtDData#S6" title="Link: #S6">References to other defined type</a>
            </td>
        </tr>
<tr>
<td>is of arbitrary (unknown) size</td>
            <td>
<a href="https://class.coursera.org/programdesign-002/wiki/view?page=HtDData#S7">self-referential or mutually referential</a>
            </td>
        </tr>
</tbody>
</table>
<br><hr>
<hr>
<a id="S1"></a>

<h3>Simple Atomic Data</h3>

<p>Use simple atomic data <strong>when the information to be represented is
itself atomic in form</strong>, such as the elapsed time since the start of the animation, the x coordinate of a car or the name of a cat.</p>
<table title="Time Data Definition" border="none" cellpadding="10" style="border: 0px solid rgb(0, 0, 0);
              padding: 10px;"><tbody><tr>
<td>
                <pre>;; Time is Natural
;; interp. number of clock ticks since start of game

(define START-TIME 0)
(define OLD-TIME 1000)

#;
(define (fn-for-time t)
  (... t))

;; Template rules used:
;;  - atomic non-distinct: Natural
</pre>

            </td>
        </tr></tbody></table>
<a id="S1.1"></a>

<h4>Forming the Template</h4>

<p>As noted below the template, it is formed according to the <a href="https://class.coursera.org/programdesign-002/wiki/view?page=DataDrivenTemplates">Data Driven Templates recipe</a>
    using the right hand column of the atomic non-distinct rule.</p>
<a id="S1.2"></a>

<h4>Guidance on Data Examples and Function Example/Tests</h4>

<p>One or two data examples are usually sufficient for simple atomic data.</p>
<p>When creating example/tests for a specific function operating on simple atomic data at least one test case will be required. Additional tests are required if there are multiple cases involved. If the function produces <tt>Boolean</tt> there needs to be
    at least a <tt>true</tt> and <tt>false</tt> test case. Also be on the lookout for cases where a number of some form is an <a href="https://class.coursera.org/programdesign-002/wiki/view?page=HtDData#S2">interval</a> in disguise, for example given a type comment like <tt>Countdown is Natural</tt>, in some functions <tt>0</tt> is
    likely to be a special case.</p>
<br><a id="S2"></a>

<h3>Intervals</h3>

<p>Use an interval when the information to be represented is numbers within a certain range. <tt>Integer[0, 10]</tt> is all the integers from 0 to 10 inclusive; <tt>Number[0, 10)</tt> is all the numbers from 0 inclusive to 10 exclusive. (The notation is that
    [ and ] mean that the end of the interval includes the end point; ( and ) mean that the end of the interval does not include the end point.)</p>
<p>Intervals often appear in <a href="https://class.coursera.org/programdesign-002/wiki/view?page=HtDData#S4">itemizations</a>, but can also appear alone, as in:</p>
<table title="Countdown Data Definition" border="none" cellpadding="10" style="border: 0px solid rgb(0, 0, 0);
              padding: 10px;"><tbody><tr>
<td>
                <pre>;; Countdown is Integer[0, 10]
;; interp. the number of seconds remaining to liftoff
(define C1 10)  ; start
(define C2 5)   ; middle
(define C3 0)   ; end
 
#;
(define (fn-for-countdown cd)
  (... cd))

;; Template rules used:
;;  - atomic non-distinct: Integer[0, 10]
</pre>

            </td>
        </tr></tbody></table>
<a id="S2.1"></a>

<h4>Forming the Template</h4>

<p>As noted below the template, it is formed according to the <a href="https://class.coursera.org/programdesign-002/wiki/view?page=DataDrivenTemplates">Data Driven Templates
  recipe</a> using the right hand column of the atomic non-distinct rule.</p>
<a id="S2.2"></a>

<h4>Guidance on Data Examples and Function Example/Tests</h4>

<p>For data examples provide sufficient examples to illustrate how the type represents information. The three data examples above are probably more than is needed in that case.</p>
<p>When writing tests for functions operating on intervals be sure to test closed boundaries as well as midpoints. As always, be sure to include enough tests to check all other points of variance in behaviour across the interval.</p>
<p>
    <br><a id="S3"></a>
</p>
<h3>Enumerations</h3>

<p>Use an enumeration <strong>when the information to be represented consists of a fixed number of distinct items</strong>, such as colors, letter grades etc. The data used for an enumeration could in principle be anything - strings, integers, images even.
    But we always use strings. In the case of enumerations it is sometimes redundant to provide an interpretation and nearly always redundant to provide examples. The example below includes the interpretation but not the examples.</p>
<table title="TLColor Data Definition" border="none" cellpadding="10" style="border: 0px solid rgb(0, 0, 0);
              padding: 10px;"><tbody><tr>
<td>
                <pre>;; LightState is one of:
;;  - "red"
;;  - "yellow"
;;  - "green"
;; interp. the color of a traffic light

;; &lt;examples are redundant for enumerations&gt;
 
#;
(define (fn-for-light-state ls)
  (cond [(string=? "red" ls) (...)]
        [(string=? "yellow" ls) (...)]
        [(string=? "green" ls) (...)]))
;; Template rules used:
;;  - one of: 3 cases
;;  - atomic distinct: "red"
;;  - atomic distinct: "yellow"
;;  - atomic distinct: "green"
</pre>

            </td>
        </tr></tbody></table>
<a id="S3.1"></a>

<h4>Forming the Template</h4>

<p>As noted below the template, it is formed according to the <a href="https://class.coursera.org/programdesign-002/wiki/view?page=DataDrivenTemplates">Data Driven Templates recipe</a> as follows:
</p>
<p>First, <tt>LightState</tt> is an enumeration with 3 cases, so the <i>one of rule</i> says to use a <tt>cond</tt> with 3 cases:</p>
<table title="TLColor Template" border="none" cellpadding="10" style="border: 0px solid rgb(0, 0, 0);
              padding: 10px;"><tbody><tr>
<td>
                <pre>(define (fn-for-tlcolor ls)
  (cond [Q1 A1]
        [Q2 A2]
        [Q3 A3])) 
</pre>

            </td>
        </tr></tbody></table>
<p>In the first clause, <tt>"red"</tt> is a distinct atomic value, so the <tt>cond</tt> question column of the <i>atomic distinct rule</i> says Q1 should be <tt>(string=? ls "red")</tt>. The cond answer column says A1 should be <tt>(...)</tt>. So we have:</p>
<table title="TLColor Template" border="none" cellpadding="10" style="border: 0px solid rgb(0, 0, 0);
              padding: 10px;"><tbody><tr>
<td>
                <pre>(define (fn-for-light-state ls)
  (cond [(string=? "red" ls) (...)]
        [Q2 A2]
        [Q3 A3])) 
</pre>

            </td>
        </tr></tbody></table>
<p>Then <tt>"yellow"</tt> and <tt>"green"</tt> are also distinct atomic values, so the final template is:</p>
<table title="TLColor Template" border="none" cellpadding="10" style="border: 0px solid rgb(0, 0, 0);
              padding: 10px;"><tbody><tr>
<td>
                <pre>(define (fn-for-light-state ls) 
  (cond [(string=? "red" ls) (...)]
        [(string=? "yellow" ls) (...)]
        [(string=? "green" ls) (...)]))
</pre>

            </td>
        </tr></tbody></table>
<a id="S3.2"></a>

<h4>Guidance on Data Examples and Function Example/Tests</h4>

<p>Data examples are redundant for enumerations.</p>
<p>Functions operating on enumerations should have (at least) as many tests as there are cases in the enumeration.</p>
<a id="S3.3"></a>

<h4>Large Enumerations</h4>

<p>Some enumerations contain a large number of elements. A canonical example is <tt>KeyEvent</tt>, which is provided as part of big-bang. <tt>KeyEvent</tt> includes all the letters of the alphabet as well as other keys you can press on the keyboard. It is not
    necessary to write out all the cases for such a data definition. Instead write one or two, as well as a comment saying what the others are, where they are defined etc.</p>
<p>Defer writing templates for such large enumerations until a template is needed for a specific function. At that point include the specific cases that function cares about. Be sure to include an else clause in the template to handle the other cases. As
    an example, some functions operating on <tt>KeyEvent</tt> may only care about the space key and just ignore all other keys, the following would be an appropriate template for such functions.</p>
<table title="KeyEvent template" border="none" cellpadding="10" style="border: 0px solid rgb(0, 0, 0);
              padding: 10px;"><tbody><tr>
<td>
                <pre>#;
(define (fn-for-key-event kevt)
  (cond [(key=? " " kevt) (...)]
        [else
         (...)]))
;; Template formed using the large enumeration special case
</pre>

            </td>
        </tr></tbody></table>
<p>The same is true of writing tests for functions operating on large enumerations. All the specially handled cases must be tested, in addition one more test is required to check the else clause.</p>
<br><a id="S4"></a>

<h3>Itemizations</h3>

<p>An itemization describes <strong>data comprised of 2 or more subclasses, at least one of which is not a distinct item</strong>. (C.f. enumerations, where the subclasses are <strong>all</strong> distinct items.) In an itemization the template is similar to
    that for enumerations: a cond with one clause per subclass. In cases where the subclass of data has its own data definition the answer part of the cond clause includes a call to a helper template, in other cases it just includes the parameter.</p>
<table title="Bird Data Definition" border="none" cellpadding="10" style="border: 0px solid rgb(0, 0, 0);
              padding: 10px;"><tbody><tr>
<td>
                <pre>;; Bird is one of:
;;  - false
;;  - Number
;; interp. false means no bird, number is x position of bird

(define B1 false)
(define B2 3) 

#;
(define (fn-for-bird b)
  (cond [(false? b) (...)]
        [(number? b) (... b)]))
;; Template rules used:
;;  - one of: 2 cases
;;  - atomic distinct: false
;;  - atomic non-distinct: Number
</pre>

            </td>
        </tr></tbody></table>
<a id="S4.1"></a>

<h4>Forming the Template</h4>

<p>As noted below the template, it is formed according to the <a href="https://class.coursera.org/programdesign-002/wiki/view?page=DataDrivenTemplates">Data Driven Templates recipe</a> using the <i>one-of rule</i>, the <i>atomic distinct rule</i> and the <i>atomic non-distinct rule</i> in order.
</p>
<a id="S4.2"></a>

<h4>Guidance on Data Examples and Function Example/Tests</h4>

<p>As always, itemizations should have enough data examples to clearly illustrate how the type represents information.</p>
<p>Functions operating on itemizations should have at least as many tests as there are cases in the itemizations. If there are intervals in the itemization, then there should be tests at all points of variance in the interval. In the case of adjoining intervals
    it is critical to test the boundaries.</p>
<a id="S4.3"></a>

<h4>Itemization of Intervals</h4>

<p>A common case is for the itemization to be comprised of 2 or more intervals. In this case functions operating on the data definition will usually need to be tested at all the boundaries of closed intervals and points between the boundaries.</p>
<table title="Reading Data Definition" border="none" cellpadding="10" style="border: 0px solid rgb(0, 0, 0);
              padding: 10px;"><tbody><tr>
<td>
                <pre>;;; Reading is one of:
;;  - Number[&gt; 30]      
;;  - Number(5, 30]     
;;  - Number[0, 5]      
;; interp. distance in centimeters from bumper to obstacle
;;    Number[&gt; 30]    is considered "safe"
;;    Number(5, 30]   is considered "warning"
;;    Number[0, 5]    is considered "dangerous"
(define R1 40)
(define R2 .9)

(define (fn-for-reading r)
  (cond [(&lt; 30 r) (... r)]
        [(and (&lt;  5 r) (&lt;= r  30)) (... r)]
        [(&lt;= 0 r 5) (... r)]))

;; Template rules used:
;;  one-of: 3 cases
;;  atomic non-distinct:  Number[&gt;30]
;;  atomic non-distinct:  Number(5, 30]
;;  atomic non-distinct:  Number[0, 5]
</pre>

            </td>
        </tr></tbody></table>
<p>As noted below the template, it is formed according to the <a href="https://class.coursera.org/programdesign-002/wiki/view?page=DataDrivenTemplates">Data Driven Templates recipe</a> using the <i>one-of rule</i>, followed by 3 uses of the <i>atomic non-distinct rule</i>.</p>
<br><a id="S5"></a>

<h3>Compound data (structures)</h3>

<p>Use structures when two or more values naturally belong together. The define-struct goes at the beginning of the data definition, before the types comment.</p>
<table title="Ball Data Definition" border="none" cellpadding="10" style="border: 0px solid rgb(0, 0, 0);
              padding: 10px;"><tbody><tr>
<td>
                <pre>(define-struct ball (x y))
;; Ball is (make-ball Number Number)
;; interp. a ball at position x, y 

(define BALL-1 (make-ball 6 10))

#;
(define (fn-for-ball b)
  (... (ball-x b)     ;Number
       (ball-y b)))   ;Number
;; Template rules used:
;;  - compound: 2 fields
</pre>

            </td>
        </tr></tbody></table>
<p>The template above is formed according to the <a href="https://class.coursera.org/programdesign-002/wiki/view?page=DataDrivenTemplates">Data Driven Templates recipe</a> using the compound rule. Then for each of the selectors, the result type of the selector (Number in the case of ball-x and ball-y) is
    used to decide whether the selector call itself should be wrapped in another expression. In this case, where the result types are primitive, no additional wrapping occurs. C.f. cases below when the reference rule applies.</p>

<h4>Guidance on Data Examples and Function Example/Tests</h4>

<p>For compound data definitions it is often useful to have numerous examples, for example to illustrate special cases. For a snake in a snake game you might have an example where the snake is very short, very long, hitting the edge of a box, touching food
    etc. These data examples can also be useful for writing function tests because they save space in each <tt>check-expect</tt>.</p>
<br><a id="S6"></a>

<h3>References to other data definitions</h3>

<p>Some data definitions contain references to other data definitions you have defined (non-primitive data definitions). One common case is for a compound data definition to comprise other named data definitions. (Or, once lists are introduced, for a list
    to contain elements that are described by another data definition. In these cases the template of the first data definition should contain calls to the second data definition's template function wherever the second data appears. For example:</p>
<table title="Game Data Definition" border="none" cellpadding="10" style="border: 0px solid rgb(0, 0, 0);
              padding: 10px;"><tbody><tr>
<td>
                <pre>---assume Ball is as defined above---

(define-struct game (ball score))
;; Game is (make-game Ball Number) 

;; interp. the current ball and score of the game

(define GAME-1 (make-game (make-ball 1 5) 2))

#;
(define (fn-for-game g)
  (... (fn-for-ball (game-ball g))
       (game-score g)))      ;Number
;; Template rules used:
;;  - compound: 2 fields
;;  - reference: ball field is Ball
</pre>

            </td>
        </tr></tbody></table>
<p>In this case the template is formed according to the <a href="https://class.coursera.org/programdesign-002/wiki/view?page=DataDrivenTemplates">Data Driven Templates recipe</a> by first using the <i>compound rule</i>. Then, since the result type of <tt>(game-ball g)</tt> is Ball, the <i>reference rule</i> is
    used to wrap the selector so that it becomes <tt>(fn-for-ball (game-ball g))</tt>. The call to <tt>game-score</tt> is not wrapped because it produces a primitive type.
</p>

<h4>Guidance on Data Examples and Function Example/Tests</h4>

<p>For data definitions involving references to non-primitive types the data examples can sometimes become quite long. In these cases it can be helpful to define well-named constants for data examples for the referred to type and then use those constants
    in the referring from type. For example:</p>
<pre>...in the data definition for Drop...
(define DTOP (make-drop 10 0))            ;top of screen
(define DMID (make-drop 20 (/ HEIGHT 2))) ;middle of screen
(define DBOT (make-drop 30 HEIGHT))       ;at bottom edge
(define DOUT (make-drop 40 (+ HEIGHT 1))) ;past bottom edge

...in the data definition for ListOfDrop...
(define LOD1 empty)
(define LOD-ALL-ON             (cons DTOP (cons DMID )))
(define LOD-ONE-ABOUT-TO-LEAVE (cons DTOP (cons DMID (cons DBOT empty))))
(define LOD-ONE-OUT-ALREADY    (cons DTOP (cons DMID (cons DBOT (cons DOUT empty)))))
</pre>

<p>In the case of references to non-primitive types the function operating on the referring type (i.e. <tt>ListOfDrop</tt>) will end up with a call to a helper that operates on the referred to type (i.e. <tt>Drop</tt>). Tests on the helper function should
    fully test that function, tests on the calling function may assume the helper function works properly.</p>
<br><a id="S7"></a>

<h3>Self-referential or mutually referential</h3>

<p>When the <strong>information in the program's domain is of arbitrary size</strong>, a well-formed self-referential (or mutually referential) data definition is needed.</p>
<p>In order to be well-formed, a self-referential data definition must:</p>
<ul>
<li>(i) have at least one case without self reference (the base case(s))</li>
    <li>(ii) have at least one case with self reference</li>
</ul>
<p>The template contains a base case corresponding to the non-self-referential clause(s) as well as one or more natural recursions corresponding to the self-referential clauses.</p>
<table title="ListOfString Data Definition" border="none" cellpadding="10" style="border: 0px solid rgb(0, 0, 0);
              padding: 10px;"><tbody><tr>
<td>
                <pre>;; ListOfString is one of:
;;  - empty
;;  - (cons String ListOfString)
;; interp. a list of strings

(define LOS-1 empty)
(define LOS-2 (cons "a" empty))
(define LOS-3 (cons "b" (cons "c" empty)))

#;
(define (fn-for-los los)
  (cond [(empty? los) (...)]                   ;BASE CASE
        [else (... (first los)                 ;String
                   (fn-for-los (rest los)))])) ;NATURAL RECURSION
;;             /
;;            /
;;       COMBINATION
;; Template rules used:
;;  - one of: 2 cases
;;  - atomic distinct: empty
;;  - compound: (cons String ListOfString)
;;  - self-reference: (rest los) is ListOfString
</pre>

            </td>
        </tr></tbody></table>
<p>In some cases a types comment can have both self-reference and reference to another type.</p>
<table title="Dot and ListOfDot Data Definitions" border="none" cellpadding="10" style="border: 0px solid rgb(0, 0, 0);
              padding: 10px;"><tbody><tr>
<td>
                <pre>(define-struct dot (x y))
;; Dot is (make-dot Integer Integer)
;; interp. A dot on the screen, w/ x and y coordinates.
(define D1 (make-dot 10 30))
#;
(define (fn-for-dot d)
  (... (dot-x d)   ;Integer
       (dot-y d))) ;Integer
;; Template rules used:
;;  - compound: 2 fields

;; ListOfDot is one of:
;;  - empty
;;  - (cons Dot ListOfDot)
;; interp. a list of Dot
(define LOD1 empty)
(define LOD2 (cons (make-dot 10 20) (cons (make-dot 3 6) empty)))
#;
(define (fn-for-lod lod)
  (cond [(empty? lod) (...)]
        [else
         (... (fn-for-dot (first lod))
              (fn-for-lod (rest lod)))]))

;; Template rules used:
;;  - one of: 2 cases
;;  - atomic distinct: empty
;;  - compound: (cons Dot ListOfDot)
;;  - reference: (first lod) is Dot 
;;  - self-reference: (rest lod) is ListOfDot
</pre>

            </td>
        </tr></tbody></table>
<h4>Guidance on Data Examples and Function Example/Tests</h4>

<p>When writing data and function examples for self-referential data definitions always put the base case first. Its usually trivial for data examples, but many function tests don't work properly if the base case isn't working properly, so testing that first
    can help avoid being confused by a failure in a non base case test. Also be sure to have a test for a list (or other structure) that is at least 2 long.</p>
</div>
<hr>
<div>
    <div style="float:left">
    	    	    </div>
    <div style="float:right;text-align:right;font-size:10px;">
    	Created Thu 21 Feb 2013  2:11 PM EST (UTC -0500)<br>
    	Last Modified Fri 27 Sep 2013  1:00 PM EDT (UTC -0400)    </div>
</div>

            </div>
        </div>
    </div>
        
    
    <script src="./HtDD_files/spark.js"></script>

<script>window.onerror = function(message, url, lineNum) {

  // First check the URL and line number of the error
  url = url || window.location.href;
  // 99% of the time, errors without line numbers arent due to our code,
  // they are due to third party plugins and browser extensions
  if (lineNum === undefined || lineNum == null) return;
  
  // Now figure out the actual error message
  // If it's an event, as triggered in several browsers
  if (message.target && message.type) {
    message = message.type;
  }
  if (!message.indexOf) {
    message = 'Non-string, non-event error: ' + (typeof message);
  }
  
  var errorDescrip = {
    message: message,
    script: url,
    line: lineNum,
    url: document.URL
  }
  
  var err = {
    key: 'page.error.javascript', 
    value: errorDescrip
  }
  
  window._204 = window._204 || [];
  window._204.push(err);
  
  window._gaq = window._gaq || [];
  window._gaq.push(err);
}</script>
<script type="text/javascript">
    // SET UP THE MULTITRACKER
        window.logger = window.Log({level:"error"});
        var parts = location.host.split(".");
    while(parts.length > 2) { parts.shift(); }

    window.multitracker = window.MultiTracker({logger:window.logger});
    window.multitracker.register('204', window._204 = window._204 || []);
    window.multitracker.register('ga', window._gaq = window._gaq || [], 'google');

    // SET UP GA and 204
    window._gaq.push(['_setAccount', 'UA-28377374-1']);
    window._gaq.push(['_setDomainName', 'coursera.org']);
    window._gaq.push(['_setAllowLinker', true]);  
    window._gaq.push(['_trackPageview']);
    
    // configure 204 with the following settings
    window._204.push(["client", "spark"]);
    window._204.push(["user", 1216070]);
    window._204.push(["domain", "." + parts.join(".")]);

    // set off the first event
    window._204.push({key:"pageview", val:{}});

    // override our multitracker queues with the ga queue when it is ready
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    
      ga.onload = ga.onreadystatechange = function() {
          ga.onreadystatechange = ga.onload = null;
          window.multitracker.get('ga').queue = window._gaq;
      };
    })();

    // override our multitracker queues with the 204 queue when it is ready
    (function() {
      var a = document.createElement('script'); a.type = 'text/javascript'; a.async = true;
      a.src = 'https://eventing.coursera.org/204.min.js';
      var s = document.getElementsByTagName('script')[0];
      s.parentNode.insertBefore(a, s);
      a.onload = a.onreadystatechange = function() {
          a.onreadystatechange = a.onload = null;
          window.multitracker.get('204').queue = window._204;
      };
    })();
</script>

<script>
  // Set up shared AB testing object
  (function() {
    window.ab = {};

    // we want to share the 204 session cookie with the AB session cookie...
    var sessionId = AB.makeSession("__204u", {expires:356, domain:"." + location.host});
        var debug = false;
    
    window.ab.user = window.AB(1216070, "user", {debug:debug, tracker:window.multitracker, logger:window.logger});
    window.ab.session = window.AB(sessionId, "session", {debug:debug, tracker:window.multitracker, logger:window.logger});

    if(window.CourseraABExperiments.user) {
        window.ab.user.addExperiments(window.CourseraABExperiments.user);
        window.ab.user.runExperimentsOn("body");
    }

    if(window.CourseraABExperiments.session) {
        window.ab.session.addExperiments(window.CourseraABExperiments.session);
        window.ab.session.runExperimentsOn("body");
    }
  })();
</script>


    <script>
      // Set up help widget
      (function() {
        $("[data-helpwidget]").each(function() {
            window.HelpWidget(this, {tracker: window.multitracker});
        });
       })();

        $("[data-readme]").each(function() {
            window.ReadMe(this);
        });
    </script>

    <script src="./HtDD_files/modal_focus.js" type="text/javascript"></script>
    <script src="./HtDD_files/get_query_parameters.js" type="text/javascript"></script>
    <script src="./HtDD_files/signature_track.js" type="text/javascript"></script>
    <script src="./HtDD_files/item_list.js" type="text/javascript"></script>
    <script src="./HtDD_files/navbar.js" type="text/javascript"></script>

    
    <script>
     // Set up help widget
      (function() {
        $("[data-helpwidget]").each(function() {
            window.HelpWidget(this, {tracker: window.multitracker});
        });
       })();
    </script>

        <script>
    (function() {
        $("<style type='text/css'> .coursera-reporter-link { display:inline-block;} </style>").appendTo("head");
    })();
    </script>
    
    <script type="text/x-mathjax-config;executed=true">
MathJax.Hub.Config({
  config: ["MMLorHTML.js"],
  
  styleSheets: [],
  styles: {},

  jax: ["input/TeX"],
  
  extensions: ["tex2jax.js"],

  preJax: null,
  postJax: null,

  preRemoveClass: "MathJax_Preview",

  showProcessingMessages: true,

  messageStyle: "none",
  
  displayAlign: "center",
  displayIndent: "0em",
  
  delayStartupUntil: "none",

  skipStartupTypeset: false,
  
  elements: [],
  
  tex2jax: {
	    inlineMath: [
	                 ['$$','$$'],      // uncomment this for standard TeX math delimiters
	                 ['\\(','\\)']
	                 ],

	                 displayMath: [
	                 ['\\[','\\]']
	                 ],

    skipTags: ["script","noscript","style","textarea","pre","code"],
    ignoreClass: "tex2jax_ignore",
    processClass: "tex2jax_process",
    processEscapes: false,
    processEnvironments: true,
    preview: "TeX"
    
  },
  
  mml2jax: {
    preview: "alttext"
    
  },
  
  jsMath2jax: {
    preview: "TeX"
    
  },

  TeX: {
    TagSide: "right",
    TagIndent: ".8em",
    MultLineWidth: "85%",
    Macros: {},

    extensions: ["AMSmath.js", "AMSsymbols.js"]
    
  },

  //============================================================================
  //
  //  These parameters control the MathML inupt jax.
  //
  MathML: {
    //
    //  This specifies whether to use TeX spacing or MathML spacing when the
    //  HTML-CSS output jax is used.
    //
    useMathMLspacing: false
  },
  
  //============================================================================
  //
  //  These parameters control the HTML-CSS output jax.
  //
  "HTML-CSS": {
    
    scale: 100,
    
    availableFonts: ["STIX","TeX"],
    
    preferredFont: "TeX",
    
    webFont: "TeX",
    
    imageFont: "TeX",
    
    undefinedFamily: "STIXGeneral,'Arial Unicode MS',serif",
      
    showMathMenu: true,

    styles: {},
    
    tooltip: {
      delayPost: 600,          // milliseconds delay before tooltip is posted after mouseover
      delayClear: 600,         // milliseconds delay before tooltip is cleared after mouseout
      offsetX: 10, offsetY: 5  // pixels to offset tooltip from mouse position
    }
  },
  
  //============================================================================
  //
  //  These parameters control the NativeMML output jax.
  //
  NativeMML: {

    scale: 100,

    showMathMenu: true,
    showMathMenuMSIE: true,

    styles: {}
  },
  
  MathMenu: {
    delay: 400,
    
    helpURL: "http://www.mathjax.org/help/user/",

    showRenderer: true,
    showFontMenu: false,
    showContext:  false,

    windowSettings: {
      status: "no", toolbar: "no", locationbar: "no", menubar: "no",
      directories: "no", personalbar: "no", resizable: "yes", scrollbars: "yes",
      width: 100, height: 50
    },
    
    styles: {}
    
  },

  MMLorHTML: {
    prefer: {
      MSIE:    "MML",
      Firefox: "MML",
      Opera:   "HTML",
      other:   "HTML"
    }
  }
});
</script>
<script type="text/javascript">
(function () {

  function loadMathJax() {
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.src  = "https://duqnjvq4jwr55.cloudfront.net/2.1/MathJax.js";
    document.getElementsByTagName("head")[0].appendChild(script);
  }

  window.loadOrRefreshMathJax = function(domId) {
    if (window.MathJax) {
      if (domId) {
        MathJax.Hub.Queue(["Typeset", MathJax.Hub, domId]);
      } else {
        MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
      }
    } else {
      loadMathJax();
    }
  }
})();
</script>
    <script type="text/javascript">
        var site_base_url = "https:\/\/www.coursera.org\/";
        var site_static_asset_url = "https:\/\/dt5zaw6a98blc.cloudfront.net\/site-static\/";
        var spark_class_short_name = "programdesign";
        var spark_class_id = 971286;
        var spark_class_url = "\/programdesign-002";
        var spark_signature_url = "https:\/\/class.coursera.org\/programdesign-002\/signature\/";

        var course_strings_name = "Introduction to Systematic Program Design - Part 1";
        var student_full_name = "Christopher Edward Beattie";
    </script>

    
<script type="text/javascript">$(function() { loadOrRefreshMathJax();})</script>
<script src="./HtDD_files/textbook_wiki.js"></script>




</body></html>